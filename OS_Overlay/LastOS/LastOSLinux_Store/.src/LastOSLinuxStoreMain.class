' Gambas class file

'Adding /LastOS/RepoBuilderNoCache Will make the cache loading always off, so as to not interfere with making repositories

'Public LLMod.StoreMode As Integer = 1 '0 Is Install Mode, 1 Is Launcher Mode (moved to LLMod now)

Public Rescanning As Boolean = False

Public DoneOnce As Boolean = False
Public MovieToPlay As String

Public StartItemCount As Integer
Public MidItemCount As Integer
Public FinishItemCount As Integer

Public ForceStart As Boolean

Public FailedDownload As Boolean

Public ForcedRes As Boolean

Public LocalDBFile As String = ".LLFileDB/LLFile_DB.ini"
Public ForceReScanItems As Boolean

Public Favorites[1001] As String '1001 games should be enough?
Public FavCount As Integer

Public Excludes[1001] As String 'Excluded mounts
Public ExcludesCount As Integer

Public ManualLocation[100] As String
Public ManualLocationCount As Integer

Public LLSettingsFile As String
Public RepositoryPathLocal As String = LLMod.Slashed(User.Home) & "zLastOSRepository/"
Public RepositoryList[100] As String
Public RepositoryListCount As Integer
Public CurrentRepositoryURL As String

Public QueueURL[1000] As String
Public QueueLocal[1000] As String
Public QueueCount As Integer
Public QueueUpTo As Integer

Public Downloading As Boolean

Public Installing As Boolean


Public ScreenShotCounter As Integer

Public CtrlPressed As Boolean
Public ShiftPressed As Boolean
Public AltPressed As Boolean

Public RunningItemKey As Integer

Public WaitASec As Boolean = False

Public InstallingItem As Boolean = False

Public TmpImage As Image
Public ForceClose As Boolean = False
Public DudItem As Boolean = False
Public ItemIcon As Picture
Public CurrentItemKey As Integer = -1
Public CurrentItem As String
Public CurrentCat As String
Public ScaleItems As Integer
Public ScaleDescription As Integer
Public IconSize As Integer
Public SelectedItems As Integer = 0
Public FirstRun As Boolean = True
Public AutoSelect As Boolean = False

Public RunDelayExec As String

Public MouseRight As Boolean

Public ContextMenu As Menu

Public SortMethod As Integer = 0
Public HideInstalled As Boolean
Public HideWindows As Boolean
Public HideLinux As Boolean
Public HideApps As Boolean
Public HideGames As Boolean
Public HidePaid As Boolean

Public AutoInstall As Boolean

Public WebLinksLink As New String[999]
Public WebLinksName As New String[999]
Public WebLinksCount As Integer
Public OldPathScan As String


'LLM = Last Linux Module
Public Sub Form_Open()
  Dim RemoteVersion As String
  Dim LocalVersion As String
  Dim OrigArgs As String
  Dim S As String
  
  OldPathScan = ""
  
  'Make sure local Repo is in place or DownloadDone will fail to be created and everything breaks.
  If Not Exist(RepositoryPathLocal) Then Shell "mkdir -p " & Chr(34) & RepositoryPathLocal & Chr(34) Wait
  If Exist(RepositoryPathLocal) Then Shell "chmod 775 " & Chr(34) & RepositoryPathLocal & Chr(34) Wait
  
  'Clean up downloader (Will quit after download??? or instant?)
  If Exist(RepositoryPathLocal & "DownloadDone") Then Shell "rm " & RepositoryPathLocal & "DownloadDone" Wait
  'Check for updated version first
  'Shell "echo " & Chr(34) & Application.Version & Chr(34) & " > " & LLMod.Slashed(LLM.AppPath) & "version"
  'No need for above, we have a .version file made anyway
  
  If LLM.CheckForUpdate = True Then
    Print "Checking for Update..."
    Try Kill "/LastOS/LastOSLinux_Store/LastLinuxStore.gambas.old" ' Clear old version, this can't happen unless the new verwsion is working, so all good
    Try Kill "/LastOS/LastOSLinux_Store/Tools/LLApp/LLApp.gambas.old" ' Clear old version, this can't happen unless the new verwsion is working, so all good
    Try Kill RepositoryPathLocal & "FailedDownload" 'Clear FailedDownload if Exist
    Try Kill "/tmp/version" ' Clear previous checks
    Try Kill "/tmp/LastLinuxStore.gambas" ' Clear previous checks
    GetOnlineFile("https://github.com/LiveFreeDead/LastOSLinux/raw/main/OS_Overlay/LastOS/LastOSLinux_Store/.version", "/tmp/version")
    While Not Exist(RepositoryPathLocal & "FailedDownload") 'This loop stops all other downloads until it's done or failed
      Wait (0.01)
      If ForceClose = True Then Quit ' No point in looping the user already quit
      If Exist("/tmp/version") Then Break 'Gets out of While, it's downloaded
    Wend
    If Not Exist(RepositoryPathLocal & "FailedDownload") Then 'If can't download the version file, then there is no internet?
      Try RemoteVersion = Trim(File.Load("/tmp/version"))  
      LocalVersion = Left(Application.Version, LLMod.InStrRevSingle(Application.Version, ".") - 1)
      RemoteVersion = Left(RemoteVersion, LLMod.InStrRevSingle(RemoteVersion, ".") - 1)
      If LocalVersion <> "" And RemoteVersion <> "" Then
        
        Installing = True
        'Message(LocalVersion & " = " & RemoteVersion)
        If Val(LocalVersion) < Val(RemoteVersion) Then 'There is an update
          LoadingScreen.Status.Text = "Updating store: v" & LocalVersion & " to v" & RemoteVersion
          Wait (0.03)
          Try Kill "/tmp/LastLinuxStore.gambas" ' Clear previous download
          Try Kill RepositoryPathLocal & "FailedDownload" 'Clear FailedDownload if Exist
          GetOnlineFile("https://github.com/LiveFreeDead/LastOSLinux/raw/main/OS_Overlay/LastOS/LastOSLinux_Store/LastLinuxStore.gambas", "/tmp/LastLinuxStore.gambas")
          While Not Exist(RepositoryPathLocal & "FailedDownload") 'This loop stops all other downloads until it's done or failed
            Wait (0.01)
            If ForceClose = True Then Quit ' No point in looping the user already quit
            If Exist("/tmp/LastLinuxStore.gambas") Then Break 'Gets out of While, it's downloaded
          Wend
          
          If Exist("/tmp/LastLinuxStore.gambas") Then 'Downloaded, install update     
            Shell "chmod +x /tmp/LastLinuxStore.gambas" Wait
            Chmod "/tmp/LastLinuxStore.gambas" To "rwxrwxr--" 'Make file executable
            Shell "mv -f /LastOS/LastOSLinux_Store/LastLinuxStore.gambas /LastOS/LastOSLinux_Store/LastLinuxStore.gambas.old" Wait
            Shell "mv -f /tmp/LastLinuxStore.gambas /LastOS/LastOSLinux_Store/LastLinuxStore.gambas" Wait
            Shell "chmod +x /LastOS/LastOSLinux_Store/LastLinuxStore.gambas" Wait
            
            '------------------------------
            'Also Update LLApp.gambas if the store updated
            Try Kill "/tmp/LLApp.gambas" ' Clear previous download
            Try Kill RepositoryPathLocal & "FailedDownload" 'Clear FailedDownload if Exist
            GetOnlineFile("https://github.com/LiveFreeDead/LastOSLinux/raw/main/OS_Overlay/LastOS/LastOSLinux_Store/Tools/LLApp/LLApp.gambas", "/tmp/LLApp.gambas")
            While Not Exist(RepositoryPathLocal & "FailedDownload") 'This loop stops all other downloads until it's done or failed
              Wait (0.01)
              If ForceClose = True Then Quit ' No point in looping the user already quit
              If Exist("/tmp/LLApp.gambas") Then Break 'Gets out of While, it's downloaded
            Wend
            
            If Exist("/tmp/LLApp.gambas") Then 'Downloaded, install update
              Shell "chmod +x /tmp/LLApp.gambas" Wait
              Chmod "/tmp/LLApp.gambas" To "rwxrwxr--" 'Make file executable
              Shell "mv -f /LastOS/LastOSLinux_Store/Tools/LLApp/LLApp.gambas /LastOS/LastOSLinux_Store/Tools/LLApp/LLApp.gambas.old" Wait
              Shell "mv -f /tmp/LLApp.gambas /LastOS/LastOSLinux_Store/Tools/LLApp/LLApp.gambas" Wait
              Shell "chmod +x /LastOS/LastOSLinux_Store/Tools/LLApp/LLApp.gambas" Wait
            End If
            '-----------------------------
            
            
            OrigArgs = ""
            For Each S In Args
              S = Trim(S)
              If S <> "" Then 
                OrigArgs = OrigArgs & " " & S
              End If
            Next
            Shell "/LastOS/LastOSLinux_Store/LastLinuxStore.gambas" & OrigArgs 'The args transfer to next call after update
            LoadingScreen.Hide 'Just hide the loading screen until we quit after a second, then the new one will start
            Wait (1)
            Quit
          End If
        End If
        
        Installing = False
      End If
    End If
  End If 'End of Checking for update
    
  'Get remote database of online web links to speed up download
  If LLMod.StoreMode = 0 Then ' We want Games Launcher to be as fast as possible, still checks for newer versions as fixes apply to it also, but this online dbd doesn't
    If LLM.UseOnlineRepository = True Then
      Try Kill RepositoryPathLocal & "FailedDownload" 'Clear FailedDownload if Exist
      Try Kill "/LastOS/LastOSLinux_Store/RemoteWebLinks.db" ' Clear previous checks  
      GetOnlineFile("https://raw.githubusercontent.com/LiveFreeDead/LastOSLinux/refs/heads/main/OS_Overlay/LastOS/LastOSLinux_Store/RemoteWebLinks.db", "/LastOS/LastOSLinux_Store/RemoteWebLinks.db")
      While Not Exist(RepositoryPathLocal & "FailedDownload") 'This loop stops all other downloads until it's done or failed
        Wait (0.01)
        If ForceClose = True Then Quit ' No point in looping the user already quit
        If Exist("/LastOS/LastOSLinux_Store/RemoteWebLinks.db") Then Break 'Gets out of While, it's downloaded
      Wend
    End If
  End If
  
  'Clean Up, if ran Store as root, then when you run as standard user these files are not writable
  Try Kill "/LastOS/LastOSLinux_Store/LastLinuxStore.gambas.old" ' Clear old version, this can't happen unless the new version is working, so all good
  Try Kill "/LastOS/LastOSLinux_Store/Tools/LLApp/LLApp.gambas.old" ' Clear old version, this can't happen unless the new version is working, so all good
  Try Kill RepositoryPathLocal & "FailedDownload" 'Clear FailedDownload if Exist
  Try Kill "/tmp/version" ' Clear previous checks
  Try Kill "/tmp/LastLinuxStore.gambas" ' Clear previous checks
  Try Kill "/tmp/LLApp.gambas" ' Clear previous download
  
  'Process Arguments passed from terminal  
  Dim PresetToLoad As String
  
  'If Args[0] = "LastOSLinux_Store" Then 'Remark this and unremark below to disable testing argument options
  If 1 = 2 Then
    AutoInstall = True
    LLM.QuitOnComplete = True
    PresetToLoad = "Preset.ini"    
  Else
   For Each S In Args
      S = Trim(S)
      'Message(S)
      If Left(S, 1) = "-" Then
        If S = "-launcher" Then LLMod.StoreMode = 1
        If S = "-l" Then LLMod.StoreMode = 1
        If S = "-autoinstall" Then AutoInstall = True
        If S = "-a" Then AutoInstall = True
        If S = "-LLM.QuitOnComplete" Then LLM.QuitOnComplete = True
        If S = "-q" Then LLM.QuitOnComplete = True
        Else
          PresetToLoad = S
        End If
    Next 
  End If
  
  'Set Title
  Title.Text = "LastOSLinux Store v" & Application.Version
  LastOSLinuxStoreMain.Text = Title.Text
  
  
  'Defaults
  Title.Font.Bold = True
  Title.Font.Size = 12
  
  Categories.Font.Bold = True
  Categories.Font.Size = 12
    
  ItemTitle.Font.Bold = True
  ItemTitle.Font.Size = 12
  
  Data.Background = LLM.SetBGCol
  Data.Items.Background = LLM.SetBGCol
  Data.Items.Foreground = LLM.SetFGCol
  
  Data.Cats.Background = LLM.SetBGCol
  Data.Cats.Foreground = LLM.SetFGCol
  
  Data.ScanPaths.Background = LLM.SetBGCol
  Data.ScanPaths.Foreground = LLM.SetFGCol

  LoadFavorites
  
  'Get default positions to scale with
  LLM.OrigFormWidth = LastOSLinuxStoreMain.W
  LLM.OrigFormHeight = LastOSLinuxStoreMain.H
  
  LLM.OrigCatLeft = Category.Left
  LLM.OrigCatWidth = Category.Width
  LLM.OrigCatTop = Category.Top
  LLM.OrigCatHeight = Category.Height
  
  LLM.OrigItemLeft = Items.Left
  LLM.OrigItemWidth = Items.Width
  LLM.OrigItemTop = Items.Top
  LLM.OrigItemHeight = Items.Height
  
  LLM.OrigScreenLeft = Screenshot.Left
  LLM.OrigScreenWidth = Screenshot.Width
  LLM.OrigScreenTop = Screenshot.Top
  LLM.OrigScreenHeight = Screenshot.Height

  'Center Form with Border (Default)
  Me.Width = Screens[0].AvailableWidth - 60
  Me.Height = Screens[0].AvailableHeight - 60
  Me.Center
  Me.Top = 15
  
  ScaleItems = Items.Font.Size + 1 '(Makes it 10 Default)
  ScaleDescription = Items.Font.Size + 2
  
  'Try to use inbuilt Settings file to store things
  Me.Top = Settings["Window/Top", Me.Top]
  Me.Left = Settings["Window/Left", Me.Left]
  Me.Height = Settings["Window/Height", Me.Height]
  Me.Width = Settings["Window/Width", Me.Width]
  ScaleItems = Settings["ScaleItems", ScaleItems]
  ScaleDescription = Settings["ScaleDescription", ScaleDescription]
    
  'Make StartButton a Tab Stop
  StartButton.NoTabFocus = False
  
  ContextMenu = New Menu(Me, True)
  'Load Theme here (Moved getting theme.ini to loading form)
  LoadTheme()
  
  Data.ClearDataFields() 'This now does the Column Adding and naming scheme
  
  Wait (0.01) 'Lets loading screen show
    
  'Get WebLinks
  If LLMod.StoreMode = 0 Then
    If LLM.UseOnlineRepository = True Then LoadWebLinks()
  End If
 
  'Get Local Items
  GetExcludedMounts() 'So My HDD's can sleep well knowing they have no items to scan
  GetItemPaths() 'Has the Online Repo in it now
  Wait (0.01) 'Lets loading screen show
  
  'Generate Categories
  GenerateCategoryList()
  
  'Generate Main List on form from Data Form
  'GenerateMainList() 'This is now done in the load preset routine so it only draws it once, if no preet found it'll still draw it.
  If LLMod.StoreMode = 0 Then
    LoadPresetFile(PresetToLoad) ' Does Generate Main List
  Else
    GenerateMainList() 'Still need to do this in Launcher Mode
  End If
    
  'FirstRun.Enabled = True
  FirstRun = False
  'LLM.Loaded = True 'Make LoadingScreen not called from the other functions 'Kept this active so I can use the Loading form to rescan items
  'LoadingScreen.Close 'Can close it now we've got the main form 'Don't can use to re-scan items
  LoadingScreen.Hide
  
  If LLMod.StoreMode = 0 Then 'Only installer mode
    If AutoInstall = True And SelectedItems > 1 Then 'If the preset doesn't load successfully then no items will be selected and it will show the main form like normal
      LastOSLinuxStoreMain.Hide 'Hide Main Form ASAP (less flicker)
      RunMiniInstaller()
    End If
  End If
  
  'ReDraw Form (Has to be at the end)
  RedrawTheme()
End

Public Sub LoadFavorites()  
  Dim I As Integer
  'Load in Favorites if exists
  FavCount = 0
  Dim InFavs As String
  Dim InFavSp As String[]
  If LLMod.StoreMode = 1 Then
    If Exist(LLM.AppPath & "/Favorites.ini") Then
      Try InFavs = File.Load(LLM.AppPath & "/Favorites.ini")
      InFavs = Replace(InFavs, Chr(13), Chr(10)) ' Convert to chr(10) not Chr(13)
      InFavSp = Split(InFavs, Chr(10))
      For I = 0 To InFavSp.Count - 1
        If Trim(InFavSp[I]) <> "" Then
          Favorites[FavCount] = Trim(InFavSp[I])
          FavCount = FavCount + 1
        End If
      Next
    End If
  End If
End

Public Sub GetExcludedMounts()
  Dim I As Integer
  'Load in Excluded Mounts if exists
  ExcludesCount = 0
  Dim InFavs As String
  Dim InFavSp As String[]
  If Exist(LLM.AppPath & "/ExcludeMounts.ini") Then
    Try InFavs = File.Load(LLM.AppPath & "/ExcludeMounts.ini")
    InFavs = Replace(InFavs, Chr(13), Chr(10)) ' Convert to chr(10) not Chr(13)
    InFavSp = Split(InFavs, Chr(10))
    For I = 0 To InFavSp.Count - 1
      If Trim(InFavSp[I]) <> "" Then
        Excludes[ExcludesCount] = Trim(InFavSp[I])
        ExcludesCount = ExcludesCount + 1
      End If
    Next
  End If
End



Public Sub GetItemPaths()
  Dim DirToCheck As String
  Dim DirInPath As String
  Dim DirInSubPath As String
  Dim Exclude As Boolean
  Dim J As Integer
  
  'Clear checked locations
  Data.ScanPaths.Clear
  
  Dim I As Integer
  
  'Add Manual Locations to scan first
  LoadManualLocations()
  If ManualLocationCount >= 1 Then
    For I = 0 To ManualLocationCount - 1
      Wait (0.07) ' Draw Loading Form
      GetItemsInPath(ManualLocation[I]) 'Scan items in location and any Subfolders of interest
      'GetLLItemsFromPath(ManualLocation[I]) ' Scan in the actual supplied path for items too' This happens anyway
    Next
  End If
  
  'Check the locations for items and Add them to the Data Form
  If LLMod.StoreMode = 0 Then 'Get Installable items
    DirToCheck = Left(LLM.AppPath, LLMod.InStrRevSingle(LLM.AppPath, "/")) ' Checks up one level from the LastOSLinux Store    
    GetItemsInPath(DirToCheck)
    
    'GetWineItemsFromPath("/LastOS/") 'for testing, Scans the root of the app path, so if working from /LastOS/LastOS_Store it'll already do it
    
    'Get / media locations
    If LLM.MediaScan = True Then
      For Each DirInPath In Dir("/media", "[^.]*", gb.Directory) ' Check all mounted and sub mounts Media also
        If Access("/media/" & DirInPath) = True Then ' Only do ones with access to them
          GetItemsInPath("/media/" & DirInPath)
          If Access("/media/" & DirInPath) = True Then ' Only do ones you have access to          
            For Each DirInSubPath In Dir("/media/" & DirInPath, "[^.]*", gb.Directory) ' Check all sub mounted
              'ExcludeMounts.ini - Excludes checking in some mounts, so not wake up sleeping HDD's
              Exclude = False
              For J = 0 To ExcludesCount
                If Excludes[J] = "/media/" & DirInPath & "/" & DirInSubPath Then
                  Exclude = True
                  Continue
                End If
              Next
              If Exclude = False Then GetItemsInPath("/media/" & DirInPath & "/" & DirInSubPath)
            Next
          End If
        End If
      Next
    End If
    
    'Get / mnt locations (Only 1 level deep)
    If LLM.MntScan = True Then
      For Each DirInPath In Dir("/mnt", "[^.]*", gb.Directory) ' Check all mounted and sub mounts Media also
        If Access("/mnt/" & DirInPath) = True Then ' Only do ones with access to them
          GetItemsInPath("/mnt/" & DirInPath)
          'ExcludeMounts.ini - Excludes checking in some mounts, so not wake up sleeping HDD's
          Exclude = False
          For J = 0 To ExcludesCount
            If Excludes[J] = "/mnt/" & DirInPath Then
              Exclude = True
              Continue
            End If
          Next
          If Exclude = False Then GetItemsInPath("/mnt/" & DirInPath)            
        End If        
      Next
    End If
    
  End If
  If LLMod.StoreMode = 1 Then 'Get Launchable Game Items
    'GetLLItemsFromPath(User.Home & "/LLGames/")
    GetItemsInPath(User.Home & "/LLGames/") ' Changed to using GetItemsIn so form updates status
    'GetWineItemsFromPath(User.Home & "/.wine/drive_c/ppGames/")
    GetItemsInPath(User.Home & "/.wine/drive_c/ppGames/")' Changed to using GetItemsIn so form updates status
  End If
  
  'Use the local Repository cache and see what goodies it has before defaulting to using the online one?
  If LLM.UseCacheRepository = True Then GetItemsInPath(RepositoryPathLocal)
  
  'Get Repository Database (Do this last so it defaults to local versions of apps and games if they exist
  If LLMod.StoreMode = 0 And LLM.UseOnlineRepository = True Then GetRepositoryDatabase() 'Only does this if installation mode  
  
End

Public Sub GetItemsInPath(DirToCheck As String)
    'Message(DirToCheck)
    'Try Resetting between item scans (Fixed)
    StartItemCount = 0
    MidItemCount = 0
    FinishItemCount = 0
    
    If Not LLM.Loaded Then
      LoadingScreen.Status.Text = "Load: " & DirToCheck
      Wait (0.07) 'Redraw loading screen, it needs a little time to redraw
    End If
    Dim I As Integer
    If Right(DirToCheck, 1) <> "/" Then DirToCheck &= "/" ' Add Slash
    If Data.ScanPaths.Count > 0 Then
      For I = 0 To Data.ScanPaths.Count - 1
        If DirToCheck = Data.ScanPaths[I].Text Then Return 'Already Scanned this path
      Next
    End If
    If Not Access(DirToCheck, gb.Read) Then Return 'Can't read it, don't even try
    If Exist(DirToCheck & ".llignore") Then
      'Print "Ignoring: " & DirToCheck
      Return 'Skip if ignore flag file found
    End If
    Data.ScanPaths.Add(Data.ScanPaths.Count, DirToCheck)    
    GetAllItemsFromPath(DirToCheck)'Check the actual path (May slow down scan, remove and add it to the manual paths only for scanning)
    'GetWineItemsFromPath(DirToCheck) 'Same as above
    If LLMod.StoreMode = 0 Then
      If LLM.UseLocal = True Or ForceReScanItems = True Then
        GetAllItemsFromPath(DirToCheck & "LLAppsInstalls/")
        GetAllItemsFromPath(DirToCheck & "LLGamesInstalls/")
        GetAllItemsFromPath(DirToCheck & "ssTek/LLAppsInstalls/")
        GetAllItemsFromPath(DirToCheck & "ssTek/LLGamesInstalls/")
        
        GetAllItemsFromPath(DirToCheck & "ssAppsInstalls/")
        GetAllItemsFromPath(DirToCheck & "ppAppsInstalls/")
        GetAllItemsFromPath(DirToCheck & "ppGamesInstalls/")
        GetAllItemsFromPath(DirToCheck & "ppAppsLive/")    
        GetAllItemsFromPath(DirToCheck & "ssTek/ssAppsInstalls/")
        GetAllItemsFromPath(DirToCheck & "ssTek/ppAppsInstalls/")
        GetAllItemsFromPath(DirToCheck & "ssTek/ppGamesInstalls/")
        
        GetAllItemsFromPath(DirToCheck & "LLTek/LLAppsInstalls/")
        GetAllItemsFromPath(DirToCheck & "LLTek/LLGamesInstalls/")
        GetAllItemsFromPath(DirToCheck & "LLTek/ssAppsInstalls/")
        GetAllItemsFromPath(DirToCheck & "LLTek/ppAppsInstalls/")
        GetAllItemsFromPath(DirToCheck & "LLTek/ppGamesInstalls/")
        
      End If
    Else 'Launcher Mode
      GetAllItemsFromPath(DirToCheck & "LLGames/")
      'GetWineItemsFromPath(DirToCheck & "LLGames/") 'Disabled, only get they types we should
      'GetLLItemsFromPath(DirToCheck & "ppGames/") 'Disabled, only get the types we should
      GetAllItemsFromPath(DirToCheck & "ppGames/")
    End If
End



Public Sub GetAllItemsFromPath(InPath As String)
  If Right(InPath, 1) <> "/" Then InPath &= "/" 'Add Trailing slash
  
  If Not Access(InPath, gb.Read) Then Return 'Can't read it, don't even try
  If Not Exist(InPath) Then Return ' The Folder Doesn't even exist, get outta here
  
  If Exist(InPath & ".llignore") Then
    'Print "Ignoring: " & InPath
    Return 'Skip if ignore flag file found
  End If
  
  'Get Folders then files
  Dim DirInPath As String
  Dim FileIn As String
  Dim AddedItems As Integer
  Dim Test As String  
  Dim RescanThis As Boolean = False
  Dim LocalDBCache As String = InPath & ".LLFileDB/"
  
  Dim Debugger As Boolean = False

  StartItemCount = Data.Items.Rows.Count 'The last row is usually empty, so this is the start (first one added)
  'if InPath <> RepositoryPathLocal And ForceReScanItems = False Then GetFromLocalDB(InPath) ' Get Local DB if not local Repo, else treat Local Repo as a cached source only
  
  If InPath <> RepositoryPathLocal Then GetFromLocalDB(InPath) ' Get Local DB if not local Repo, else treat Local Repo as a cached source only
  
  'Shell "rm " & Chr(34) & InPath & ".a" & Chr(34) 'Remove them all (temp fixer)
  'Shell "rm " & Chr(34) & InPath & "LLFile_DB.ini" & Chr(34) 'Remove them all (temp fixer)
  
  MidItemCount = Data.Items.Rows.Count
  
  AddedItems = MidItemCount - StartItemCount
  
  If Debugger Then Print "Added DB Items: " & AddedItems
  
  If AddedItems >= 1 Then 'Check if the folder contains more items than we loaded and force a reload if so
  
    'Check if using Local DB or the last check has newer items/changes
    Shell "find " & InPath & " -type f -newer " & LocalDBCache & ".a" To Test    
    If Trim(Test) <> "" Then  'Somethings Newer - rescan this path  
      'Shell "touch " & Chr(34) & InPath & ".a" & Chr(34)
      RescanThis = True
      'ForceReScanItems = True
    End If
    
    If Not Exist(LocalDBCache & ".a") Then          
      'Shell "touch " & Chr(34) & InPath & ".a" & Chr(34)
      RescanThis = True
    End If
  End If
  
  If LLM.SkipScanIfDBFile = False Or Exist(LocalDBCache) = False Or ForceReScanItems = True Then 'If set not to skip or no db exist then we need to scan if below are also true
    If MidItemCount = StartItemCount Or InPath = RepositoryPathLocal Or RescanThis = True Then 'Not Added from LocalDB so get scanning 'Always scan Online Repo as Cache, not as LocalDB
      If Debugger Then Print "Rescanning Compressed Linux: " & InPath
      'Compressed Linux first, only check the root folders for them though
      If LLMod.StoreMode = 0 Then 'Don't get these in Launcher Mode
        For Each FileIn In Dir(InPath & "/", "*.tar")
           If LLMod.LoadLLFile(InPath & FileIn) = True Then 'Dropped extra slash & "/"
            If Debugger Then Print "Adding Compressed Item: " & InPath & FileIn
             AddItem()
           End If
        Next        
      End If      
      If Debugger Then Print "Rescanning Linux: " & InPath
    'Uncompressed Linux items now
      For Each DirInPath In Dir(InPath, "[^.]*", gb.Directory)
        'Get Files:
        'Message("Here 1")
        If Access(InPath & "/" & DirInPath, gb.Read) Then
          For Each FileIn In Dir(InPath & "/" & DirInPath, "*.ll?")      
            If FileIn = "LLApp.lla" Or FileIn = "LLGame.llg" Then 'Only do items with valid file (Until I add tar support)     
              If LLMod.LoadLLFile(InPath & DirInPath & "/" & FileIn) = True Then 'Dropped extra slash & "/"
              If Debugger Then Print "Adding Item: " & InPath & DirInPath & FileIn
               AddItem()
              End If        
            End If
          Next
        End If
      Next
      If Debugger Then Print "Rescanning Compressed Wine: " & InPath
      'Compressed Wine ones next, only check the root folders for them though
      If LLMod.StoreMode = 0 Then 'Don't get these in Launcher Mode
        For Each FileIn In Dir(InPath & "/", "*.??z") '*.apz, *.pgz
          If Debugger Then Print "Checking inside Wine Compressed Item: " & InPath & FileIn
           If LLMod.LoadSSFile(InPath & FileIn) = True Then 'Dropped extra slash & "/" also returns true if loaded success
            If Debugger Then Print "Adding Wine Compressed Item: " & InPath & FileIn
            AddItem()
           End If
        Next
      End If
      If Debugger Then Print "Rescanning Wine: " & InPath
      'Uncompressed Wine items now
      For Each DirInPath In Dir(InPath, "[^.]*", gb.Directory)
        'Get Files:
        If Access(InPath & "/" & DirInPath, gb.Read) Then
          For Each FileIn In Dir(InPath & "/" & DirInPath, "*.?p?")      
            If FileIn = "ssApp.app" Or FileIn = "ppApp.app" Or FileIn = "ppGame.ppg" Then 'Only do items with valid file
              If LLMod.LoadSSFile(InPath & DirInPath & "/" & FileIn) = True Then
                If Debugger Then Print "Adding Wine Item: " & InPath & DirInPath & FileIn
                AddItem()
              End If
            End If
          Next
        End If
      Next
      Dim CCt As Integer
      CCt = 0
      Try CCt = Data.Items.Rows.Count 'will stay 0 if it was 0
      If Debugger Then Print "Added Scanned Items: " & Str(CCt - MidItemCount)
      
      'Save If Local DB Enabled
      If InPath <> RepositoryPathLocal Then
        SaveToLocalDB(InPath)
        'Moved Below to after SaveDB, so it doesn't make it unless it makes a DB file, else whats the point?
        'Shell "touch " & Chr(34) & InPath & ".a" & Chr(34) ' Touch after DB creation to make it up to date
      End If
    End If
  End If
End


Public Sub SaveToLocalDB(InPath As String)
  If Not Access(InPath, gb.Write) Then Return  'Only try and save if writable path
  Dim LocalDB As String

  Dim I As Integer
 
  Dim J As Integer

  Dim UN As String
  Dim OutFile As String
  Dim RepoContent As String
  Dim RepoLine As String
  Dim Tx As String
  
  InPath = LLMod.Slashed(InPath)
  
  Dim LocalDBCache As String = InPath & ".LLFileDB/"
  
  LocalDB = InPath & LocalDBFile  
'SaveDB Here to repload above next time
  FinishItemCount = Data.Items.Rows.Count
  'Message(Str(StartItemCount) & " " & Str(MidItemCount) & " " & Str(FinishItemCount))
  
  If FinishItemCount > StartItemCount Then 'Found Items save a DB (I fixed the miscount issue making sure to move it into the main routines instead of the sub routines)
  'Changing to saving from StartItem instead of 0
  ' For I = 0 To LLM.DataItemsRows
    For I = StartItemCount To LLM.DataItemsRows
      'Check if item is local or skip (can't build a repo with remote items)
      If InStr(Data.Items[I, Data.CFileINI].Text, "%dbpath%/", 1) Then Continue
      
      UN = Lower(Replace(Data.Items[I, Data.CTitleName].Text, " ", "") & Data.Items[I, Data.CBuildType].Text)  'Make Lower and remove spaces (disable version for now & Data.Items[I, Data.CVersion].Text)     
      
      
      If Not Exist(LocalDBCache) Then
        Shell "mkdir -p " & Chr(34) & LocalDBCache & Chr(34) Wait
        'Message("mkdir -p " & Chr(34) & LocalDBCache & Chr(34))
      End If
      If Exist(LocalDBCache) Then Shell "chmod -R 775 " & Chr(34) & LocalDBCache & Chr(34) Wait
      
      RepoLine = ""
      For J = 1 To Data.Items.Columns.Count - 1          
        Tx = Data.Items[I, J].Text
        'Keep Icons in a .LLFileDB folder on the USB
        If J = Data.CFileIcon Then
          If Exist(Data.Items[I, Data.CFileIcon].Text) And Left(Tx, 5) = "/tmp/" Then 'Only do the Temp path ones as the others are Not stored in compressed items anyway
            Tx = "%dbpath%/.LLFileDB/" & UN & Right(Data.Items[I, Data.CFileIcon].Text, 4)            
            OutFile = LocalDBCache & UN & Right(Data.Items[I, Data.CFileIcon].Text, 4)
            If Exist(OutFile) Then Try Kill OutFile  'Remove existing Icon if found
            Try Copy Data.Items[I, Data.CFileIcon].Text To OutFile 
          End If
        End If
        'Worked so well for Icons, try with Screenshots
        If J = Data.CFileScreenshot Then
          If Exist(Data.Items[I, Data.CFileScreenshot].Text) And Left(Tx, 5) = "/tmp/" Then 'Only do the Temp path ones as the others are Not stored in compressed items anyway
            Tx = "%dbpath%/.LLFileDB/" & UN & Right(Data.Items[I, Data.CFileScreenshot].Text, 4)
            OutFile = LocalDBCache & UN & Right(Data.Items[I, Data.CFileScreenshot].Text, 4)
            If Exist(OutFile) Then Try Kill OutFile  'Remove existing Icon if found
            Try Copy Data.Items[I, Data.CFileScreenshot].Text To OutFile 
          End If
        End If
        
        Tx = Replace(Tx, InPath, "%dbpath%/") 'Instead of doing below, just replce DB path for everything
        
        If Left(Tx, 5) = "/tmp/" Then Tx = Right(Tx, Len(Tx) - LLMod.InStrRevSingle(Tx, "/")) 'Just keep the screenshot name to nab out of the Archive individually when clicking an Item
                  
        If J = Data.CDescription Then
          Tx = Replace(Data.Items[I, J].Text, Chr(13), Chr(10))
          Tx = Replace(Tx, Chr(10), Chr(30)) 'Convert CRLF to RS (special)
        End If
        
        If J = Data.CURL Then
          Tx = Replace(Data.Items[I, J].Text, Chr(13), Chr(10))
          Tx = Replace(Tx, Chr(10), "|") 'Convert CRLF to Pipe splitter
        End If
        
        If J = Data.CIconRef Then Tx = "0" 'Cleat Icon refs, we need to re-gen them
              
        RepoLine &= Tx & ",|,"
      Next
      If RepoLine <> "" Then 'Only add good items
        RepoContent &= RepoLine & Chr(10)
      End If
    Next
    If RepoContent <> "" Then 'Don't bother with an empty file
      Try File.Save(LocalDB, RepoContent) 'Save DB File if able to
      Try Shell "touch " & Chr(34) & LocalDBCache & ".a" & Chr(34) Wait' Touch after DB creation to make it up to date, only if a DB is made
      If Not Exist(LocalDBCache & ".a") Then 'Touch failed, just make the file with echo
        Try Shell "echo '.' > " & Chr(34) & LocalDBCache & ".a" & Chr(34) Wait' Create DB to make it up to date, only if a DB is made and so it skips making a new db unless forced rescan
      End If
    End If
  End If
End



Public Sub GetFromLocalDB(InPath As String)
  If Not Access(InPath, gb.Read) Then Return  'Only try and read if readable path
  If InPath = OldPathScan Then Return 'We just scanned that one, get out
  OldPathScan = InPath
  
    'Check DB file here
  Dim LocalDB As String

  Dim I As Integer

  Dim DRows As Integer    
  Dim J As Integer
  Dim K As Integer
  Dim InRepo As String
  Dim InRepoSp As String[]
  Dim InRepoSpTx As String[]
  Dim SkipItem As Boolean
  
  Dim LoadedIcon As Image
  
  Print "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  Print InPath
  
  LocalDB = InPath & LocalDBFile
  
  If LLM.UseLocalDBFiles = False Then ForceReScanItems = True ' If disabled DB's then force rescan
  
  If Exist(LocalDB) And ForceReScanItems = False Then 'Scan in Database
    
    Try InRepo = File.Load(LocalDB)
    InRepoSp = Split(InRepo, Chr(10))
    Print "Loading DB: " & LocalDB
    For I = 0 To InRepoSp.Count - 1
      If Trim(InRepoSp[I]) <> "" Then
        
        InRepoSp[I] = Replace(InRepoSp[I], ",|,", Chr(8))
        InRepoSpTx = Split(InRepoSp[I], Chr(8))
        SkipItem = False
        If Data.Items.Rows.Count >= 1 Then 'Check if Existing Item
          For J = 0 To Data.Items.Rows.Count - 1
            If Data.Items[J, Data.CTitleName].Text & Data.Items[J, Data.CVersion].Text = InRepoSpTx[Data.CTitleName - 1] & InRepoSpTx[Data.CVersion - 1] Then SkipItem = True 'Skip Duplicated Items (Adds different versions though)
          Next
        End If
        If SkipItem = False Then 'Only add new items          
          Data.Items.Rows.Count = Data.Items.Rows.Count + 1 'Always Add a row before starting
          DRows = Data.Items.Rows.Count - 1
          LLM.DataItemsRows = DRows
          
          For K = 1 To InRepoSpTx.Count
            If K <= Data.Items.Columns.Count - 1 Then 
              'Replace all %dbpath%/ with InPath
              InRepoSpTx[K - 1] = Replace(InRepoSpTx[K - 1], "%dbpath%/", InPath) 'Change all to this, Hopefully the sub folders are kept in the wtiring loop below, or I'll have to add it
              'Print InRepoSpTx[K - 1]
              'If K = Data.CPathINI Then InRepoSpTx[K - 1] = Replace(InRepoSpTx[K - 1], "%dbpath%", CurrentRepositoryURL) 'Adds download URL to item    
              If K = Data.CDescription Then InRepoSpTx[K - 1] = Replace(InRepoSpTx[K - 1], Chr(30), Chr(13)) 'Testing chr 13 for description, may need 10
              If K = Data.CURL Then InRepoSpTx[K - 1] = Replace(InRepoSpTx[K - 1], "|", Chr(13)) 'Testing chr 13 for description, may need 10
              
              Data.Items[DRows, K].Text = InRepoSpTx[K - 1]
            End If
          Next
        
          Data.Items[DRows, Data.CRefID].Text = Str(Data.Items.Rows.Count) 'Use RefID instead of the built in one which loses positions
          Data.Items[DRows, Data.CIconRef].Text = "0"
          Data.Items[DRows, Data.CSelected].Text = "F"
          
          If Exist(LLMod.ExpPath(Data.Items[DRows, Data.CPathApp].Text)) = True Then
            Data.Items[DRows, Data.CInstalled].Text = "T" 'Hide installed items if picked to
          Else
            Data.Items[DRows, Data.CInstalled].Text = "F" ' Show not installed items
          End If
          
        End If
      End If
    Next
    
    'Get the Icons for added items and put in the Data references, so items have their icons properly
    If Data.Items.Rows.Count >= 1 Then 'Check if Icon exist
      For J = StartItemCount To Data.Items.Rows.Count - 1
        If Exist(Data.Items[J, Data.CFileIcon].Text) Then 

          'Load Icon ready to add here
          LoadedIcon = Image.Load(Data.Items[J, Data.CFileIcon].Text)
          
          'Add Icon and add ReferenceID       
          If LoadedIcon <> Null Then
            Data.IconCount = Data.IconCount + 1
            Data.Icons.Add(Data.IconCount, Data.IconCount, LoadedIcon.Picture)
            Data.Items[J, Data.CIconRef].Text = Str(Data.IconCount)
          End If          
        Else 'Give up
        End If        
      Next
    End If
    
  End If
End




Public Sub AddItem()
  Dim UN As String
  Dim LoadedIcon As Image
  Dim DRows As Integer  
  Dim ParentRefID As Integer
  Dim ParentDRow As Integer
  Dim I, J As Integer
  Dim RealPath As String
  Dim RPOnly As String
  
  If LLMod.StoreMode = 1 And LLMod.LLTitle = "Games Launcher" Then Return ' Hide Games Launcher from Launcher
  
  ''Can't do below if we're using DB files as they need complete items added, I'll move the dupe checks to the GenerateMainList
  'If Data.Items.Rows.Count >= 1 Then 'Check if Existing Item
  '  For I = 0 To Data.Items.Rows.Count - 1
  '    If Data.Items[I, Data.CTitleName].Text & Data.Items[I, Data.CVersion].Text = LLMod.LLTitle & LLMod.LLVersion Then Return 'Skip Duplicated Items (Adds different versions though)
  '  Next
  'End If
  
  Data.Items.Rows.Count = Data.Items.Rows.Count + 1 'Always Add a row before starting
  DRows = Data.Items.Rows.Count - 1
  LLM.DataItemsRows = DRows

  Data.Items[DRows, Data.CRefID].Text = Str(Data.Items.Rows.Count) 'Use RefID instead of the built in one which loses positions

  'Get Unique Name
  UN = Lower(Replace(LLMod.LLTitle, " ", "") & LLMod.LLBuildType)  'Make Lower and remove spaces (disable version for now & LLMod.LLVersion)  
  
  RPOnly = Left(LLMod.LLIconFile, LLMod.InStrRevSingle(LLMod.LLIconFile, "/"))  
    
  RealPath = LLMod.LLIconFile
  
  'Message(RPOnly & UN & ".png")
  'Message(RPOnly & UN & ".png")
  If Exist(RPOnly & UN & ".png") Then 'Use Unique Name Icon if avaialble
    RealPath = RPOnly & UN & ".png"
  End If
  'Load Icon ready to add here
  'Print "Icon: " & LLMod.LLIconFile
  
  If RealPath <> "" And Exist(RealPath) Then LoadedIcon = Image.Load(RealPath)
  

  'Add Icon and add ReferenceID       
  
  If LoadedIcon <> Null Then
    Data.IconCount = Data.IconCount + 1
    Data.Icons.Add(Data.IconCount, Data.IconCount, LoadedIcon.Picture)
    Data.Items[DRows, Data.CIconRef].Text = Str(Data.IconCount)
  End If  
  Data.Items[DRows, Data.CSelected].Text = "F"
  Data.Items[DRows, Data.CBuildType].Text = LLMod.LLBuildType
  
  If LLMod.LLCompressed = True Then
    Data.Items[DRows, Data.CCompressed].Text = "T"
    Data.Items[DRows, Data.CFileCompressed].Text = LLMod.LLFileINI
  Else
    Data.Items[DRows, Data.CCompressed].Text = "F"
    Data.Items[DRows, Data.CFileCompressed].Text = ""
  End If
  
  If LLMod.LLHideInLaunch = True Then Data.Items[DRows, Data.CHidden].Text = "T" Else Data.Items[DRows, Data.CHidden].Text = "F"
  If LLMod.LLShowAlways = True Then Data.Items[DRows, Data.CShowAlways].Text = "T" Else Data.Items[DRows, Data.CShowAlways].Text = "F"
  If LLMod.LLShowSetupOnly = True Then Data.Items[DRows, Data.CShowSetupOnly].Text = "T" Else Data.Items[DRows, Data.CShowSetupOnly].Text = "F"
  If LLMod.LLNoInstall = True Then Data.Items[DRows, Data.CNoInstall].Text = "T" Else Data.Items[DRows, Data.CNoInstall].Text = "F"
  
  Data.Items[DRows, Data.CInstalled].Text = LLMod.LLInstalled ' Checks if installed
  Data.Items[DRows, Data.CArch].Text = LLMod.LLArch 'Arch not yet added
  Data.Items[DRows, Data.COS].Text = LLMod.LLOS 'Arch not yet added
  Data.Items[DRows, Data.CTitleName].Text = LLMod.LLTitle
  Data.Items[DRows, Data.CVersion].Text = LLMod.LLVersion
  
  If LLMod.LLCategory <> "Game" And LLMod.LLCategory <> "Games" Then
    If LLMod.StoreMode = 1 Then 'If Launcher Mode, Drop Game, Games and Games\ from all items categories        
      LLMod.LLCategory = Replace(LLMod.LLCategory, "Games" & Chr(92), "")
      LLMod.LLCategory = Replace(LLMod.LLCategory, "Games", "")
      LLMod.LLCategory = Replace(LLMod.LLCategory, "Game", "")
    Else 'InstallMode
      LLMod.LLCategory = Replace(LLMod.LLCategory, "Games" & Chr(92), "")
      If InStr(LLMod.LLCategory, "Gamer") <= 0 And InStr(LLMod.LLCategory, "Games") <= 0 Then
        LLMod.LLCategory = Replace(LLMod.LLCategory, "Game", "; Games") ' Make Linux games go into the Games Category
      End If
      'LLMod.LLCategory = Replace(LLMod.LLCategory, "Games", "")
    End If
  Else 'Only has Game as the category, we need to keep atlest that
    LLMod.LLCategory = Replace(LLMod.LLCategory, "Game", "Games") 'But convert to Games instead
  End If
  LLMod.LLCategory = Replace(LLMod.LLCategory, "Gamess", "Games")
  Data.Items[DRows, Data.CCategories].Text = LLMod.LLCategory
  Data.Items[DRows, Data.CDescription].Text = LLMod.LLDescription
  Data.Items[DRows, Data.CURL].Text = LLMod.LLURL
  Data.Items[DRows, Data.CPriority].Text = LLMod.LLPriority
  Data.Items[DRows, Data.CPathApp].Text = LLMod.LLAppPath
  Data.Items[DRows, Data.CPathINI].Text = LLMod.LLINIPath
  Data.Items[DRows, Data.CFileINI].Text = LLMod.LLFileINI
  Data.Items[DRows, Data.CFileIcon].Text = LLMod.LLIconFile
  Data.Items[DRows, Data.CFileScreenshot].Text = LLMod.LLScreenshotFile
  Data.Items[DRows, Data.CFileFader].Text = LLMod.LLFaderFile
  Data.Items[DRows, Data.CFileMovie].Text = LLMod.LLMovieFile
  Data.Items[DRows, Data.CTags].Text = LLMod.LLTags
  Data.Items[DRows, Data.CPublisher].Text = LLMod.LLPublisher
  Data.Items[DRows, Data.CLanguage].Text = LLMod.LLLanguage
  Data.Items[DRows, Data.CRating].Text = LLMod.LLRating
  ' Data.Items[DRows, Data.CAdditional].Text = LLMod.LL 'Need to add this
  Data.Items[DRows, Data.CPlayers].Text = LLMod.LLPlayers
  Data.Items[DRows, Data.CLicense].Text = LLMod.LLLicense
  Data.Items[DRows, Data.CReleaseVersion].Text = LLMod.LLReleaseVersion
  Data.Items[DRows, Data.CReleaseDate].Text = LLMod.LLReleaseDate
  'Data.Items[DRows, Data.CRequiredRuntimes].Text = LLMod.LLRe 'Missing
  Data.Items[DRows, Data.CBuilder].Text = LLMod.LLBuilder
  Data.Items[DRows, Data.CInstalledSize].Text = LLMod.LLInstalledSize
  
  ''Process MultiLinks here:-
  'If LLMod.LnkCount = 1 Or LLMod.StoreMode = 0 Then 'Only has one or install mode, no need for Multiples
  'Always add first item to parent item, all others can be onlyadded in launcher mode and when more than one
  If LLMod.StoreMode = 1 Then Data.Items[DRows, Data.CTitleName].Text = LLMod.LnkDisplayName[1] 'Use only shortcut names and not the Installer Title Name
  Data.Items[DRows, Data.CLnkTitle].Text = LLMod.LnkDisplayName[1]
  Data.Items[DRows, Data.CLnkComment].Text = LLMod.LnkComment[1]
  Data.Items[DRows, Data.CLnkDescription].Text = LLMod.LnkDescription[1]
  Data.Items[DRows, Data.CLnkCategories].Text = LLMod.LnkCatalog[1]
  
  'If Launcher mode Then make sure Each Link has a category If Not given In .lnk
  If LLMod.StoreMode = 1 Then 
    If Data.Items[DRows, Data.CLnkCategories].Text = "" Then Data.Items[DRows, Data.CLnkCategories].Text = Data.Items[DRows, Data.CCategories].Text
  End If
  'Make sure to get a category from the Link if it was empty
  If Data.Items[DRows, Data.CCategories].Text = "" Then Data.Items[DRows, Data.CCategories].Text = Data.Items[DRows, Data.CLnkCategories].Text
  
  Data.Items[DRows, Data.CLnkRunPath].Text = Trim(LLMod.ExpPath(LLMod.LnkRunInPath[1]))
  Data.Items[DRows, Data.CLnkExec].Text = Trim(LLMod.ExpPath(LLMod.LnkExec[1]))
  'Data.Items[DRows, Data.CLnkArguments].Text = LLMod.LnkArguments[1] 'Doesn't Exist yet
  Data.Items[DRows, Data.CLnkExec].Text = Trim(LLMod.ExpPath(LLMod.LnkExec[1]))
  'Data.Items[DRows, Data.CLnkFlags].Text = LLMod.LnkFlags[1] 'Doesn't Exist yet
  'Data.Items[DRows, Data.CLnkAssociations].Text = LLMod.LnkAssociations[1] ' Doesn't exist yet
  Data.Items[DRows, Data.CLnkTerminal].Text = LLMod.LnkTerminal[1]
  'Data.Items[DRows, Data.CLnkMultiple].Text = LLMod.LnkMultiple[1]
  'Data.Items[DRows, Data.CLnkParentRef].Text = LLMod.LnkParentRef[1] ' Doesn't Exist Yet
  ParentDRow = DRows
  ParentRefID = Data.Items[DRows, Data.CRefID].Text
   If LLMod.LnkCount > 1 And LLMod.StoreMode = 1 Then 'Multi Link, need to duplicate items etc
    For I = 2 To LLMod.LnkCount 'Skip first one as it's added above to the parent item
      'Add Shortcut Item, copy partent item so it has all the data it can
      Data.Items.Rows.Count = Data.Items.Rows.Count + 1 'Always Add a row before starting
      DRows = Data.Items.Rows.Count - 1
      LLM.DataItemsRows = DRows    
      Data.Items[DRows, Data.CRefID].Text = Str(Data.Items.Rows.Count) 'Use Next RefID instead of the built in one which loses positions
      
      'clone from parent ID's Data here 
      For J = 1 To Data.Items.Columns.Count - 1
        Data.Items[DRows, J].Text = Data.Items[ParentDRow, J].Text
      Next
      
      Data.Items[DRows, Data.CTitleName].Text = LLMod.LnkDisplayName[I] 'Replaces Title text with Link Name here
      
      Data.Items[DRows, Data.CLnkTitle].Text = LLMod.LnkDisplayName[I]
      Data.Items[DRows, Data.CLnkDescription].Text = LLMod.LnkDescription[I]
      Data.Items[DRows, Data.CLnkComment].Text = LLMod.LnkComment[I]
      Data.Items[DRows, Data.CLnkCategories].Text = LLMod.LnkCatalog[I]
      Data.Items[DRows, Data.CLnkRunPath].Text = Trim(LLMod.ExpPath(LLMod.LnkRunInPath[I]))
      Data.Items[DRows, Data.CLnkExec].Text = Trim(LLMod.ExpPath(LLMod.LnkExec[I]))
      
      If Trim(LLMod.ExpPath(LLMod.LnkExec[I])) <> "" Then 
        If Exist(LLMod.Slashed(LLMod.LLAppPath) & Trim(LLMod.LnkExec[I])) Then
          LLMod.LnkExec[I] = LLMod.Slashed(LLMod.LLAppPath) & Trim(LLMod.LnkExec[I])           
        End If
      End If
      
      'Data.Items[DRows, Data.CLnkArguments].Text = LLMod.LnkArguments[I] 'Doesn't Exist yet
      'Data.Items[DRows, Data.CLnkExec].Text = LLMod.LnkExec[I]
      Data.Items[DRows, Data.CLnkIcon].Text = Trim(LLMod.ExpPath(LLMod.LnkIcon[I]))
      'Data.Items[DRows, Data.CLnkFlags].Text = LLMod.LnkFlags[I] 'Doesn't Exist yet
      'Data.Items[DRows, Data.CLnkAssociations].Text = LLMod.LnkAssociations[I] ' Doesn't exist yet
      Data.Items[DRows, Data.CLnkTerminal].Text = LLMod.LnkTerminal[I]
      Data.Items[DRows, Data.CLnkMultiple].Text = "T" 'LLMod.LnkMultiple[I]
      Data.Items[DRows, Data.CLnkParentRef].Text = ParentRefID 'Doesn't Exist Yet
      
      'Get Unique Name
      UN = Lower(Replace(Data.Items[DRows, Data.CLnkTitle].Text, " ", "") & Data.Items[DRows, Data.CBuildType].Text)  'Make Lower and remove spaces (disable version for now & LLMod.LLVersion)  
      
      RPOnly = Left(Data.Items[DRows, Data.CLnkIcon].Text, LLMod.InStrRevSingle(Data.Items[DRows, Data.CLnkIcon].Text, "/"))  
        
      RealPath = Data.Items[DRows, Data.CLnkIcon].Text 
      
      'Message(RPOnly & UN & ".png")
      'Message(RPOnly & UN & ".png")
      If Exist(RPOnly & UN & ".png") Then 'Use Unique Name Icon if avaialble
        RealPath = RPOnly & UN & ".png"
      End If
      'Load Icon ready to add here
      'Print "Icon: " & LLMod.LLIconFile
      
      If RealPath <> "" And Exist(RealPath) Then
        LoadedIcon = Image.Load(RealPath)
        'Data.Items[DRows, Data.CLnkIcon].Text = RealPath ' Change Icon so it works in Database file ' Not this one, thats for the .Desktop File, leave incase I want to change to use it
        Data.Items[DRows, Data.CFileIcon].Text = RealPath ' Change Icon so it works in Database file
      End If
    
      'Add Icon and add ReferenceID       
      
      If LoadedIcon <> Null Then
        Data.IconCount = Data.IconCount + 1
        Data.Icons.Add(Data.IconCount, Data.IconCount, LoadedIcon.Picture)
        Data.Items[DRows, Data.CIconRef].Text = Str(Data.IconCount)
      End If  
      
      
    Next   
  End If
  
End




Public Sub GenerateCategoryList()
  Dim I, J, K As Integer
  Dim FoundCat As Boolean
  Dim CatSp As String[]
  Dim CatTesting As String

  'Generate Categories
  Category.Clear  ' - NEVER use clear except for ListViews  
  
  Dim LastAddedDataCat As Integer = 0
  
  Dim LastAddedCat As Integer = 0
  Category.Add(LastAddedCat, "All")
  LastAddedCat = LastAddedCat + 1
  If LLMod.StoreMode = 1 Then 'If Launcher mode add Favorites Category
    Category.Add(LastAddedCat, "Favorites")
    Category.Item.Foreground = &h00FF00    
    LastAddedCat = LastAddedCat + 1
  End If
  Category.Add(LastAddedCat, "Linux")  
  LastAddedCat = LastAddedCat + 1
  Category.Add(LastAddedCat, "Windows")  
  LastAddedCat = LastAddedCat + 1
  
  'Message(Str(LLM.DataItemsRows) & "=" & Str(Data.ItemsRows))
  
  'Add To Data form so can sort
  If LLM.DataItemsRows >= 0 Then
    For I = 1 To LLM.DataItemsRows      
      'Check if existing Category and Add it otherwise, no empties
      If Trim(Data.Items[I, Data.CCategories].Text) <> "" Then 'Don't add Empties       
        CatSp = Split(Data.Items[I, Data.CCategories].Text, ";")
        FoundCat = False
        For K = 0 To CatSp.Count - 1
          CatTesting = Trim(Replace(CatSp[K], ";", ""))
          
          If LLMod.StoreMode = 0 Then 'Make sure all games have Game written before their category in store mode
            Select Case Data.Items[I, Data.CBuildType].Text
            Case "ppGame", "LLGame"
              If Left(CatTesting, 4) <> "Game" Then CatTesting = "Game " & CatTesting              
            End Select
          
          
          End If
                    
          If CatTesting <> "" Then 'Don't Add Empties here either
            If LastAddedDataCat > 0 Then
              For J = 1 To LastAddedDataCat
                If Data.Cats[J].Text = CatTesting Then
                  FoundCat = True
                  Break 'Found, don't scan rest
                End If
              Next
            End If
            If FoundCat = False Then
              LastAddedDataCat = LastAddedDataCat + 1
              Data.Cats.Add(LastAddedDataCat, CatTesting)
            End If
          End If
        Next 'K
      End If
    Next
    'Now add Categories to main form from Sorted List
    Data.Cats.MoveFirst
    For I = 1 To Data.Cats.Count 'This now reads the sorted order from Data.Cats
      Category.Add(LastAddedCat, Data.Cats.Item.Text)      
      Data.Cats.MoveNext
      LastAddedCat = LastAddedCat + 1
    Next
  End If
End

'******************************************* Generate Main List Here*******************************************

Public Sub GenerateMainList()
  If Rescanning = True Then Return
  If Data.Items.Rows.Count <= 0 Then Return 'No Items, may as well leave
  Dim I As Integer
  Dim J As Integer
  Dim ListIconSize As Integer
  Dim FoundItem As Boolean = False
  Dim FirstItem As Integer
  Dim CatFound As Integer
  Dim K As Integer
  Dim ItemNameVersion As String
  Dim VerS1 As String
  Dim VerS2 As String
  Dim Ver1 As Float
  Dim Ver2 As Float
  Dim HideItem As Boolean
  Dim BT As String
  Dim BT1 As String
  Dim BT2 As String
  
  Items.Clear() 'Safe for ListView (Not Tables)  
  SelectedItems = 0
  
  'Sort List here
  If SortMethod = 0 Then Items.Sorted = True ' Alphabetical
  If SortMethod = 1 Then Items.Sorted = False 'UnSorted
  
  If LLM.DataItemsRows >= 0 Then ' Must have 1 item
    FirstItem = 0
    If LLMod.StoreMode = 0 Then
      If Lower(Left(CurrentCat, 5)) = "game " Then CurrentCat = Right(CurrentCat, Len(CurrentCat) - 5) 'Makes Installer mode categories check drop "Game " from tests
    End If
    For I = 0 To LLM.DataItemsRows
      
      HideItem = False
      Try CatFound = InStr(Data.Items[I, Data.CCategories].Text, CurrentCat, gb.IgnoreCase)
      If CurrentCat = "Favorites" And FavCount >= 1 Then 'Favorites doesn't exist in Install Mode, so will never do this anyway
        For K = 0 To FavCount - 1
          If Lower(Data.Items[I, Data.CTitleName].Text) = Lower(Favorites[K]) Then
            CatFound = 7 ' Found the Category if it's a favorite
            Break ' Stop the for as it's found
          End If
        Next
      End If
      
      
      BT = Trim(Data.Items[I, Data.CBuildType].Text)
      
      If BT = "LLApp" Or BT = "LLGame" Then
        If CurrentCat = "Linux" Then CatFound = 7
      Else 'Windows Item
        If CurrentCat = "Windows" Then CatFound = 7
      End If
      
      If CurrentCat = "" Or CurrentCat = "All" Or CatFound >= 1 Then  'Only add if in the cat
        If Data.Items[I, Data.CTitleName].Text = "" Then Continue 'Don't show dead items, even if the data is in tact and error may occur
        
        'Print (Data.Items[I, Data.CTitleName].Text & "=" & Data.Items[I, Data.CInstalled].Text)
        If HideInstalled = True And Data.Items[I, Data.CInstalled].Text = "T" Then
          HideItem = True        
          Continue 'Jumps to Next For
        End If
        If LLM.HideLocal = True And Left(Data.Items[I, Data.CPathINI].Text, 4) <> "http" Then Continue 'All but the http items are not shown
        
        If LLM.HideOnline = True And Left(Data.Items[I, Data.CPathINI].Text, 4) = "http" Then 
          If LLM.UseCacheRepository = False Then Continue 'Skip showing Online Items at all when showing online and cache is off          
          If Not Exist(Replace(Data.Items[I, Data.CFileINI].Text, "%dbpath%/", RepositoryPathLocal)) Then Continue 'Don't show uncached items when Online is off and Cache not shown          
        End If
        If LLMod.StoreMode = 1 And Data.Items[I, Data.CHidden].Text = "T" Then Continue 'Skip hidden Items in Launcher Mode
        If HideWindows = True And Lower(Left(Data.Items[I, Data.CBuildType].Text, 2)) <> "ll" Then Continue 'Hide Windows Items
        If HideLinux = True And Lower(Left(Data.Items[I, Data.CBuildType].Text, 2)) = "ll" Then Continue 'Hide Windows Items
        
        If HideApps = True And Lower(Data.Items[I, Data.CBuildType].Text) = "llapp" Then Continue 'Hide App Items
        If HideApps = True And Lower(Data.Items[I, Data.CBuildType].Text) = "ssapp" Then Continue 'Hide App Items
        If HideApps = True And Lower(Data.Items[I, Data.CBuildType].Text) = "ppapp" Then Continue 'Hide App Items
        If HideGames = True And Lower(Data.Items[I, Data.CBuildType].Text) = "llgame" Then Continue 'Hide Game Items        
        If HideGames = True And Lower(Data.Items[I, Data.CBuildType].Text) = "ppgame" Then Continue 'Hide Game Items
        
        If HidePaid = True And Left(Data.Items[I, Data.CLicense].Text, 1) = "1" Then Continue 'Hide Paid Items
         
        'ListIconSize = ScaleItems + (ScaleItems / 2) + 2
        ListIconSize = Items.Font.H 'Use Font Height in Pixels to set icon height, works great
        If FirstItem = 0 Then FirstItem = Val(Data.Items[I, Data.CRefID].Text) 'Keeps the ID of the first added item so we can jump to it on the list
        
        'Check if duplcated and hide all but the first occurence
        
        Items.MoveFirst()
        For J = 1 To Items.Count 'This is the only way to access them in order as shown, so doesn't use ref keys
          'Print Data.Items[I, Data.CTitleName].Text & " " & Data.Items[I, Data.CVersion].Text & " = " & Items.Item.Text
          If Trim(Data.Items[I, Data.CTitleName].Text & " " & Data.Items[I, Data.CVersion].Text) = Items.Item.Text Then ' As Games don't have versions in the Generated list, this will show duplicates, look into it later
            HideItem = True
            Continue 'Skip Duplicated Items 'Need to add Items List items text here (order isn't important)
          End If
          Items.MoveNext()
        Next
        If HideItem = True Then Continue 'No point in doing other checks, it's hidden from above checks
        
        'Do Version Check here and skip if older
        ItemNameVersion = Data.Items[I, Data.CTitleName].Text
        HideItem = False
        For J = 0 To LLM.DataItemsRows        
           If J <> I And Data.Items[J, Data.CTitleName].Text = ItemNameVersion Then
             
             'It's the same title name but not itself, check version number, else hide duplicate/older
             If Trim(Data.Items[I, Data.CVersion].Text) = "" Then 'No version, can't compare, just add it for now
             Else
               If Trim(Data.Items[J, Data.CVersion].Text) <> "" Then ' Don't compare to empty version ones, Pointless
                  VerS1 = Lower(Trim(Data.Items[I, Data.CVersion].Text)) 'The item we are deciding to include or not
                  VerS2 = Lower(Trim(Data.Items[J, Data.CVersion].Text)) 'The item we compare to
                  'Remove all common extras so it's more compatible to compare versions
                  VerS1 = Replace(VerS1, "version", "")
                  VerS1 = Replace(VerS1, "build", "")
                  VerS1 = Replace(VerS1, "v", "")
                  VerS1 = Replace(VerS1, "r1", "")
                  VerS1 = Replace(VerS1, "r2", "")
                  VerS1 = Replace(VerS1, "r3", "")
                  VerS1 = Replace(VerS1, "r4", "")
                  VerS1 = Replace(VerS1, "-", "")
                  VerS2 = Replace(VerS2, "version", "")
                  VerS2 = Replace(VerS2, "build", "")
                  VerS2 = Replace(VerS2, "v", "")
                  VerS2 = Replace(VerS2, "r1", "")
                  VerS2 = Replace(VerS2, "r2", "")
                  VerS2 = Replace(VerS2, "r3", "")
                  VerS2 = Replace(VerS2, "r4", "")
                  VerS2 = Replace(VerS2, "-", "")
                  Ver1 = 0
                  Ver2 = 0
                  Try Ver1 = Val(VerS1)
                  Try Ver2 = Val(VerS2)
                  
                  BT1 = Trim(Data.Items[I, Data.CBuildType].Text)
                  BT2 = Trim(Data.Items[J, Data.CBuildType].Text)
                  
                  If BT2 = BT1 Then 'Only compare if they are the same build type
                    If Ver1 >= Ver2 Then 'Should it be >= or just >, it should be >= otherwise they all hide when including r2 etc, better to show a vew too many than none at all
                    Else
                      HideItem = True 'Skips older item here
                      Continue 'Only take one newer to make it obsolete
                    End If
                  End If
                End If
            End If
           End If
        Next
        If HideItem = True Then Continue 'Skips older items
        
        If LLMod.StoreMode = 0 Then
          If Trim(Data.Items[I, Data.CVersion].Text) <> "" Then ItemNameVersion &= " " & Trim(Data.Items[I, Data.CVersion].Text)
        End If
        
        
        'Add Item 'Did get an error here, so may need to protect it better Glenn
        If HideItem = False Then ' Just in case it makes its way to here, still hide it
          If Data.Items[I, Data.CIconRef].Text <> Null Then
            If Data.Icons[Val(Data.Items[I, Data.CIconRef].Text)] <> Null Or Val(Data.Items[I, Data.CIconRef].Text) >= 1 Then 'If ok
            
              Items.Add(Val(Data.Items[I, Data.CRefID].Text), ItemNameVersion, Data.Icons[Val(Data.Items[I, Data.CIconRef].Text)].Picture.Stretch(ListIconSize, ListIconSize))            
            Else 'If Broken/missing Icon
              Items.Add(Val(Data.Items[I, Data.CRefID].Text), ItemNameVersion, Theme.Res[1].Picture.Stretch(ListIconSize, ListIconSize)) 'Theme Res 1 is the default Icon
            End If
          End If
        End If
        
        'Item font color
        If LLMod.StoreMode = 0 Then 'Only show colours for Installer, Had a crash here once
          Select Case Lower(Data.Items[I, Data.CBuildType].Text)
          Case "ssapp"
            Try Items[Data.Items[I, 0].Text].Foreground = LLM.SetItemColssApp
          Case "ppapp"
            Try Items[Data.Items[I, 0].Text].Foreground = LLM.SetItemColppApp
          Case "ppgame"
            Try Items[Data.Items[I, 0].Text].Foreground = LLM.SetItemColppGame
          Case "llapp"
            Try Items[Data.Items[I, 0].Text].Foreground = LLM.SetItemColLLApp
          Case "llgame"
            Try Items[Data.Items[I, 0].Text].Foreground = LLM.SetItemColLLGame
          End Select
        End If
        'Select if set to selected
        If Data.Items[I, Data.CSelected].Text = "T" Then
          Items[Data.Items[I, 0].Text].Background = LLM.SetSelectCol 'Highlight Selected
          SelectedItems = SelectedItems + 1
        End If       
      End If      
    Next
  End If
  
  'Do this after as not to intefere with the Move.Next used to check for dupes
  For I = 0 To Items.Count - 1
  'Reselect Previous item if still exists
    'Message(Str(Data.Items.Rows.Count) & " = " & Str(I) & "  === " & Str(Items.Count))
   If Data.Items[I, Data.CTitleName].Text <> "" And CurrentItem = Data.Items[I, Data.CTitleName].Text Then '(Same item that was selcted, Reselect it)            
     If AutoSelect = False Then Try Items[CurrentItemKey].Selected = True 'Try will stop error if not found
     FoundItem = True                                
   End If
  Next
 
 
  If FoundItem = False 'Not found item in new list Then Then
    If FirstRun = False Then 'Only select the first item when not FirstRun
      Items.MoveFirst()
     'Move Cursor to current item
      Try Items.Item.Selected = True
      Try Items_Click() 'Load data and screenshot etc
    End If
  End If     
  
  'Update Stats  
  If SelectedItems > 0 Then 
    Stats.Text = Str(SelectedItems) & "/" & Str(Items.Count) & " Items"
  Else 
    Stats.Text = Str(Items.Count) & " Items"
  End If

End


Public Sub RedrawTheme()
  'If RanOnce = False Then Return
  LLM.ScaleX = LastOSLinuxStoreMain.W / LLM.OrigFormWidth
  LLM.ScaleY = LastOSLinuxStoreMain.H / LLM.OrigFormHeight
  
  Items.Left = LLM.OrigItemLeft * LLM.ScaleX
  Items.Top = LLM.OrigItemTop * LLM.ScaleY
  Items.Width = LLM.OrigItemWidth * LLM.ScaleX
  Items.Height = LLM.OrigItemHeight * LLM.ScaleY
  
  'Category.Left = LLM.OrigCatLeft * LLM.ScaleX
  'Category.Top = LLM.OrigCatTop * LLM.ScaleY
  'Category.Width = LLM.OrigCatWidth * LLM.ScaleX
  'Category.Height = LLM.OrigCatHeight * LLM.ScaleY
  Category.Left = LLM.OrigCatLeft * LLM.ScaleX
  Category.Top = Items.Top
  Category.Width = Items.Left - Category.Left + 1 'Add one so the border is single line over the items border
  Category.Height = Items.Height
  
  Stats.Left = Category.Left
  Stats.Width = (Items.Left + Items.Width) - Category.Left
  Stats.Top = Category.Top + Category.Height + 3 'Leave as High as I can, to get most room
  
  Screenshot.Left = LLM.OrigScreenLeft * LLM.ScaleX
  Screenshot.Top = LLM.OrigScreenTop * LLM.ScaleY
  Screenshot.Width = LLM.OrigScreenWidth * LLM.ScaleX
  Screenshot.Height = LLM.OrigScreenHeight * LLM.ScaleY
  
  MoviePlayer.Left = Screenshot.Left
  MoviePlayer.Top = Screenshot.Top
  MoviePlayer.Width = Screenshot.Width
  MoviePlayer.Height = Screenshot.Height
  
  Title.Left = Screenshot.Left
  Title.Width = Screenshot.Width
  Title.Height = Screenshot.Top
  
  Categories.Left = Category.Left
  Categories.Width = Category.Width
  Categories.Height = Screenshot.Top
  
  ItemTitle.Left = Items.Left
  ItemTitle.Width = Items.Width
  ItemTitle.Height = Screenshot.Top
  
  StartButton.Left = Screenshot.Left + Screenshot.Width - StartButton.Width
  StartButton.Top = Category.Top + Category.Height - StartButton.Height + 10 'Shift down 10 pixels for optimal space
  
  StartButTab.Left = 1 - (StartButTab.Width)'Off Screen (Just want it's tab stop)
  StartButTab.Top = 1 - (StartButTab.Height)

  IconPic.Left = Screenshot.Left
  IconPic.Top = Category.Top + Category.Height - IconPic.Height + 10 'Shift down 10 pixels for optimal space

  Try LastOSLinuxStoreMain.Picture = LLM.Wallpaper.Stretch(LastOSLinuxStoreMain.W, LastOSLinuxStoreMain.H)
  
  'Screenshot.Picture = LLM.Screenshot.Stretch(Screenshot.W, Screenshot.H)
  'Try scaling the screenshot here
  Try TmpImage = LLM.Screenshot.Image
  Try TmpImage = TmpImage.Stretch(-1, Screenshot.Height)
  Try Screenshot.Picture = TmpImage.Picture
  
  If LLM.Icon = Null Then LLM.Icon = Picture.Load("/LastOS/LastOS.png")
  Try IconPic.Picture = LLM.Icon.Stretch(IconPic.W, IconPic.H)
  If LLM.StartButton = Null Then LLM.StartButton = Picture.Load("/LastOS/LastOS.png")
  Try StartButton.Picture = LLM.StartButton.Stretch(StartButton.W, StartButton.H)
  
  'Move/Size Description
  Description.Left = Screenshot.Left + 10  'Padding for text
  Description.Width = Screenshot.Width - 10
  Description.Top = Screenshot.Top + Screenshot.Height + 10 'Add Padding
  Description.Height = IconPic.Top - Description.Top - 10
  
  'MetaData
  Dim FH As Integer
  FH = URLTit.Font.H
  
  CategoryTit.Left = IconPic.Left + IconPic.Width + 5
  CategoryTit.Top = IconPic.Top
  ItemCategory.Left = CategoryTit.Left + CategoryTit.Width + 2
  ItemCategory.Width = StartButton.Left - ItemCategory.Left - 2
  ItemCategory.Top = IconPic.Top
  
  URLTit.Left = IconPic.Left + IconPic.Width + 5
  URLTit.Top = CategoryTit.Top + (FH * 1)
  ItemURL.Left = URLTit.Left + URLTit.Width + 2
  ItemURL.Width = StartButton.Left - ItemURL.Left - 2
  ItemURL.Top = URLTit.Top
  
  
  PublisherTit.Left = URLTit.Left
  ItemPublisher.Left = ItemURL.Left
  PublisherTit.Top = URLTit.Top + (FH * 2)
  ItemPublisher.Top = URLTit.Top + (FH * 2)
  ItemPublisher.Width = StartButton.Left - ItemPublisher.Left - 2
  
  ReleasedTit.Left = URLTit.Left
  ItemReleased.Left = ItemURL.Left
  ReleasedTit.Top = URLTit.Top + (FH * 3)
  ItemReleased.Top = URLTit.Top + (FH * 3)
  ItemReleased.Width = StartButton.Left - ItemReleased.Left - 2
  
  InstallSizeTit.Left = URLTit.Left
  ItemInstallSize.Left = ItemURL.Left
  InstallSizeTit.Top = URLTit.Top + (FH * 4)
  ItemInstallSize.Top = URLTit.Top + (FH * 4)
  ItemInstallSize.Width = StartButton.Left - ItemInstallSize.Left - 2
  
  
End


Public Sub Form_Resize()
  RedrawTheme()
End

Public Sub IconPic_MouseDown()
  If CtrlPressed Then
    'Data.Items.Columns.Width = -1 ' Make all columns the width they need to be, not good with long descriptions
    'Data.Items.Columns.Width = 60
    Data.Show
  End If
  CtrlPressed = False
End


Public Sub Items_Click()
  MovieToPlay = ""
  If ForceClose Then Return 'This is incase wget ties up downloading.
  
  If CtrlPressed = False And DoneOnce = True Then 'If used Ctrl to show unique name, revert to showing selected amount
    DoneOnce = False
    Return  
  End If
  
  Try MoviePlayer.Stop ' Stop Any Movies
  MovieTimer.Enabled = False
  Screenshot.Visible = True
  MoviePlayer.Visible = False
  If MouseRight Then 'Right clicked
    'Return 'Don't do anything here -Doesn't update the screen but changed the index, bad idea, would have to reverted to last user selected item if we want this in the future
  End If
  Dim UN As String 'Unique Name
  Dim BT As String
  Dim InstSize As Integer
  Dim InstSizeText As String
  Dim RefsID As Integer 'Uses RefID instead of having to remember to put -1 on all the keys
  If Items.Current = Null Then Return 'Don't do anything if no/null items clicked on

  ScreenShotCounter = 0
  
  CurrentItemKey = Items.Current.Key 'Val(Data.Items[Items.Current.Key - 1, Data.CRefID].Text) '-1 because the list is 0 based
  RefsID = CurrentItemKey - 1
  CurrentItem = Items.Current.Text

  'Get Unique Name
  UN = Lower(Replace(Data.Items[RefsID, Data.CTitleName].Text, " ", "") & Data.Items[RefsID, Data.CBuildType].Text)  'Make Lower and remove spaces (disable version for now & Data.Items[RefsID, Data.CVersion].Text)

  'Change Fader to current
  ''LLM.Icon = Data.Icons[CurrentItemKey].Picture.Stretch(IconPic.W, IconPic.H) 'Old Method, get from file as it's the fader not the icon shown
  
  
  'allow clicking with Ctrl to show UN (Unique Name) in Stats  
  If CtrlPressed = True Or DoneOnce = True Then
    Stats.Text = UN
    DoneOnce = True  
  Else
    'Update Stats  
    If SelectedItems > 0 Then 
      Stats.Text = Str(SelectedItems) & "/" & Str(Items.Count) & " Items"
    Else 
      Stats.Text = Str(Items.Count) & " Items"
    End If        
  End If  
  
  
  'See if online resource and grab it if able and doesn't exist in LocalDB folder already
  Dim RealPath As String
  Dim RPOnly As String
  Dim ItemRepositoryURL As String
  
  'Grab Local Fader or download from URL
  RealPath = Data.Items[RefsID, Data.CFileFader].Text
  
  If InStr(Data.Items[RefsID, Data.CFileFader].Text, "%dbpath%/", 1) >= 1 Then
    
    RealPath = Replace(RealPath, "%dbpath%/", RepositoryPathLocal)
    ItemRepositoryURL = Left(Data.Items[RefsID, Data.CPathINI].Text, LLMod.InStrRevSingle(Data.Items[RefsID, Data.CPathINI].Text, "/"))
    If Left(ItemRepositoryURL, 1) = "/" Then 'Local Database
      RealPath = Data.Items[RefsID, Data.CFileFader].Text
      RealPath = Replace(RealPath, "%dbpath%/", ItemRepositoryURL & ".LLFileDB/")
    Else 'Remote
      'Now get Fader
      If Not Exist(RealPath) Then 'Get Fader from online repo if missing
        GetOnlineFile(ItemRepositoryURL & "database/" & UN & ".png", RealPath)
      End If
    End If
  End If
  
  'Set RPOnly to the item Path and look for UN fader
  RPOnly = Left(RealPath, LLMod.InStrRevSingle(RealPath, "/"))  
  
  If Exist(RPOnly & UN & ".png") Then
    RealPath = RPOnly & UN & ".png"
  End If
  
  
  If Exist(RealPath) Then
    Try LLM.Icon = Picture.Load(RealPath).Stretch(IconPic.W, IconPic.H)
  Else
    RealPath = Data.Items[RefsID, Data.CFileIcon].Text 'Use the Icon/Fader If not available
    If Exist(RealPath) Then
      Try LLM.Icon = Picture.Load(RealPath).Stretch(IconPic.W, IconPic.H)
    Else 'Just use default Icon    
      LLM.Icon = Theme.Res[1].Picture.Stretch(IconPic.W, IconPic.H) 'Default Theme Icon (just in case)
    End If
  End If
  
  IconPic.Picture = LLM.Icon
  
  Title.Text = Data.Items[RefsID, Data.CTitleName].Text
  
  'Screenshot
  RealPath = Data.Items[RefsID, Data.CFileScreenshot].Text
  If InStr(Data.Items[RefsID, Data.CFileScreenshot].Text, "%dbpath%/", 1) >= 1 Then
    RealPath = Replace(RealPath, "%dbpath%/", RepositoryPathLocal)
    ItemRepositoryURL = Left(Data.Items[RefsID, Data.CPathINI].Text, LLMod.InStrRevSingle(Data.Items[RefsID, Data.CPathINI].Text, "/"))
    
    If Left(ItemRepositoryURL, 1) = "/" Then 'Local Database
      RealPath = Data.Items[RefsID, Data.CFileScreenshot].Text
      RealPath = Replace(RealPath, "%dbpath%/", ItemRepositoryURL & ".LLFileDB/")
    Else 'Remote
      If Not Exist(RealPath) Then 'Get screenshot from online repo if missing
        GetOnlineFile(ItemRepositoryURL & "database/" & UN & ".jpg", RealPath)
      End If  
    End If
  End If
  
  If Exist(RPOnly & UN & ".jpg") Then
    RealPath = RPOnly & UN & ".jpg"
  End If
  
  'Message(RealPath)
    
  'Change Screenshot to current
  If Exist(RealPath) Then
    'Must use Try or it will error out on dud pictures
    Try LLM.Screenshot = Picture.Load(RealPath) 'Don't Resize Screenshot stored in ram ' It's not fix it
  Else ' Use Theme Picture
    Try LLM.Screenshot = Picture.Load(LLM.AppPath & "/Themes/" & LLM.ThemeName & "/Screenshot.jpg")
  End If
  
  'Try Movie here
  
  If Exist(RPOnly & UN & ".mp4") Then
    RealPath = RPOnly & UN & ".mp4"    
  Else
    RealPath = Data.Items[RefsID, Data.CFileMovie].Text
  End If
  
  
  If LLM.UseVideoPlayback = True And Exist(RealPath) Then
    MovieToPlay = RealPath
    Try MoviePlayer.URL = RealPath ' Load the movie in case the users starts it    
    Try MoviePlayer.Play
    Wait (0.01) ' Let it do a quick play so it caches
    Try MoviePlayer.Stop
    MovieTimer.Restart
    MovieTimer.Enabled = True
  Else
    Screenshot.Visible = True
    MoviePlayer.Visible = False
    MoviePlayer.Stop ' Just In Case
    MovieTimer.Enabled = False 'Just in case
  End If
 
  'Screenshot.Picture = LLM.Screenshot.Stretch(Screenshot.W, Screenshot.H) 'Only resize the displayed picture, we want full res for Windows resizing
  TmpImage = LLM.Screenshot.Image
  TmpImage = TmpImage.Stretch(-1, Screenshot.Height)
  Screenshot.Picture = TmpImage.Picture

  'Change Description to current
  Description.Text = ""  'Start Blank
  
  'Rating
  If Data.Items[RefsID, Data.CRating].Text <> "" Then Description.Text &= "Rating: " & Data.Items[RefsID, Data.CRating].Text & "   "
  
  'License 3 Open Source, 2-Free, 1-Paid, 0 Unknown  
  If Left(Trim(Data.Items[RefsID, Data.CLicense].Text)) = "0" Then Description.Text &= "License: Unknown" & "   "
  If Left(Trim(Data.Items[RefsID, Data.CLicense].Text)) = "1" Then Description.Text &= "License: Paid" & "   "
  If Left(Trim(Data.Items[RefsID, Data.CLicense].Text)) = "2" Then Description.Text &= "License: Free" & "   "
  If Left(Trim(Data.Items[RefsID, Data.CLicense].Text)) = "3" Then Description.Text &= "License: Open" & "   "

  'Shorter to use variable
  BT = Data.Items[RefsID, Data.CBuildType].Text
  
  'OS (Linux or Windows)
  Select Case Lower(BT)
  Case "ssapp"
    Description.Text &= "OS: Win" & "   " 
  Case "ppapp"
    Description.Text &= "OS: Win" & "   "
  Case "ppgame"
    Description.Text &= "OS: Win" & "   "
  Case "llapp"
    Description.Text &= "OS: Linux" & "   "
  Case "llgame"
    Description.Text &= "OS: Linux" & "   "
  End Select

  ''Categories (Moved to Meta Data)
  'Description.Text &= "Category: " & Data.Items[RefsID, Data.CCategories].Text & "   "
  
  'Installed:
  If LLMod.StoreMode = 0 Then ' Only do this in install mode
    If Data.Items[RefsID, Data.CInstalled].Text = "T" Then Description.Text &= " Installed: Yes  "
    If Data.Items[RefsID, Data.CInstalled].Text = "F" Then Description.Text &= " Installed: No  "
  End If
  
  'Location
  If LLMod.StoreMode = 1 Then 
    Description.Text &= Chr(10) & "Location: " & LLMod.ExpPath(Data.Items[RefsID, Data.CPathINI].Text) & "   " 'CPathApp
  Else
    Description.Text &= Chr(10) & "Location: " & LLMod.ExpPath(Data.Items[RefsID, Data.CPathINI].Text) & "   "
  End If
  
  If Data.Items[RefsID, Data.CLnkDescription].Text = "" Then
    Description.Text &= Chr(10) & Chr(10) & Replace(Data.Items[RefsID, Data.CDescription].Text, Chr(30), Chr(13)) 'Change RS to CRLF
  Else
    Description.Text &= Chr(10) & Chr(10) & Replace(Data.Items[RefsID, Data.CLnkDescription].Text, Chr(30), Chr(13)) 'Change RS to CRLF
  End If
  Description.Pos = 0
  Description.Wrap = True
  
  Dim MetaTop As Integer = IconPic.Top + 14 'Pixels down to make it more centered and to make the description not blend with it
  
  'Category
  If Trim(Data.Items[RefsID, Data.CCategories].Text) <> "" Then
    ItemCategory.Text = Data.Items[RefsID, Data.CCategories].Text
    CategoryTit.Top = MetaTop
    ItemCategory.Top = MetaTop
    MetaTop = MetaTop + URLTit.Font.H
    ItemCategory.Visible = True
    CategoryTit.Visible = True
  Else
    ItemCategory.Text = ""
    ItemCategory.Visible = False
    CategoryTit.Visible = False
  End If
  
  'URL Links
  If Trim(Data.Items[RefsID, Data.CURL].Text) <> "" Then
    ItemURL.Text = Replace(Data.Items[RefsID, Data.CURL].Text, "|", " ") 
    URLTit.Top = MetaTop
    ItemURL.Top = MetaTop
    MetaTop = MetaTop + URLTit.Font.H
    ItemURL.Visible = True
    URLTit.Visible = True
  Else
    ItemURL.Text = ""
    ItemURL.Visible = False
    URLTit.Visible = False
  End If
  
  'Publisher
  If Trim(Data.Items[RefsID, Data.CPublisher].Text) <> "" Then
    ItemPublisher.Text = Data.Items[RefsID, Data.CPublisher].Text
    PublisherTit.Top = MetaTop
    ItemPublisher.Top = MetaTop
    MetaTop = MetaTop + URLTit.Font.H
    ItemPublisher.Visible = True
    PublisherTit.Visible = True
  Else
    ItemPublisher.Text = ""
    ItemPublisher.Visible = False
    PublisherTit.Visible = False
  End If
  
  'Released
  If Trim(Data.Items[RefsID, Data.CReleaseDate].Text) <> "" Then
    ItemReleased.Text = Data.Items[RefsID, Data.CReleaseDate].Text
    ReleasedTit.Top = MetaTop
    ItemReleased.Top = MetaTop
    MetaTop = MetaTop + URLTit.Font.H
    ItemReleased.Visible = True
    ReleasedTit.Visible = True
  Else
    ItemReleased.Text = ""
    ItemReleased.Visible = False
    ReleasedTit.Visible = False
  End If
  
  'InstallSize
  InstSize = 0
  If Left(BT, 2) = "LL" Then
    Try InstSize = Val(Data.Items[RefsID, Data.CInstalledSize].Text)
    InstSize = InstSize / 1000
  Else
    Try InstSize = Val(Data.Items[RefsID, Data.CInstalledSize].Text)
    InstSize = InstSize / 1000000 '(Convert To MB)
  End If
  
  InstSizeText = Str(InstSize) & " MB"
  
  If InstSize > 0 Then
    ItemInstallSize.Text = InstSizeText
    InstallSizeTit.Top = MetaTop
    ItemInstallSize.Top = MetaTop
    MetaTop = MetaTop + URLTit.Font.H
    ItemInstallSize.Visible = True
    InstallSizeTit.Visible = True
  Else
    ItemInstallSize.Text = ""
    ItemInstallSize.Visible = False
    InstallSizeTit.Visible = False
  End If
End

Public Sub Form_Close()
  'It cleans up it's own mess, no need to delete temp folders
  'Delete Temp Folder
  'Shell "rm -r " & Chr(34) & Temp$("LLTmp*") & Chr(34) Wait  
  
  'Clean up downloader (Will quit after download??? or instant?)
  If Exist(RepositoryPathLocal & "DownloadDone") Then Shell "rm " & RepositoryPathLocal & "DownloadDone" Wait

  'Saves settings to User.Home &/ ".config/gambas3" &/ Application.Name & ".conf"  
  Settings["Window/Top"] = Me.Top
  Settings["Window/Left"] = Me.Left
  Settings["Window/Height"] = Me.Height
  Settings["Window/Width"] = Me.Width
  Settings["ScaleItems"] = ScaleItems
  Settings["ScaleDescription"] = ScaleDescription
  Settings.Save
  
  ForceClose = True
  ScreenResolution.Close
  Data.Close
  Theme.Close
  MiniInstaller.Close
  LoadingScreen.Close
  MySettings.Close
End

Public Sub Form_BeforeArrange()
  Dim Done As Boolean = False
  If LastOSLinuxStoreMain.Width < 400 Then
    LastOSLinuxStoreMain.Width = 400
    Done = True
  End If
  If LastOSLinuxStoreMain.Height < 280 Then
    LastOSLinuxStoreMain.Height = 280
    Done = True
  End If  
  If Done = True Then Stop Event
End

Public Sub StartButton_Enter()
  Try StartButton.Picture = Theme.Res[4].Picture.Stretch(StartButton.Width, StartButton.Height)
End

Public Sub StartButton_Leave()
  Try StartButton.Picture = Theme.Res[3].Picture.Stretch(StartButton.Width, StartButton.Height)
End

Public Sub StartButton_MouseDown()

  StartButton.Top = StartButton.Top + 1
  StartButton.Left = StartButton.Left + 1

End

Public Sub Category_Click()
  If Category.Current <> Null Then Try CurrentCat = Category.Current.Text 'Error protection done right
  GenerateMainList()
  'Items_Click() 'Click Item (Don't need this)
End

Public Sub Items_MouseWheel()
  If CtrlPressed Then
    If Mouse.Delta > 0 Then
      ScaleItems = ScaleItems + 1
    Else If Mouse.Delta < 0 Then
      ScaleItems = ScaleItems - 1
    End If
    If ScaleItems > 20 Then ScaleItems = 20
    If ScaleItems < 5 Then ScaleItems = 5
    
    Items.Font.Size = ScaleItems
    Category.Font.Size = ScaleItems   
    
    GenerateMainList() 'Needed to update icons
    Stop Event
  
  End If

End

Public Sub Form_KeyPress()
  If Key.Control Then CtrlPressed = True
  If Key.Shift Then ShiftPressed = True
  If Key.Alt Then AltPressed = True
End

Public Sub Form_KeyRelease()

    If LLMod.StoreMode = 0 Then 'Store
      If CtrlPressed And Key.Code = Key["O"] Then LoadPreset()
      If CtrlPressed And Key.Code = Key["S"] Then SavePreset()      
    Else ' Launcher
      
    End If
    
    If AltPressed And Key.Code = Key["S"] Then SaveCurrentList()
    If AltPressed And Key.Code = Key["E"] Then EditItem()
    
    If LLMod.StoreMode = 1 Then 
      If AltPressed And Key.Code = Key["D"] Then 
        If Items[Items.Current.Key] = Null Then Return 'No Item Text, skip
        MakeDesktop(Items.Current.Key - 1)    
      End If
      If AltPressed And Key.Code = Key["A"] Then 
        If Items[Items.Current.Key] = Null Then Return 'No Item Text, skip
        BuildToDesktop(Data.Items[Items.Current.Key - 1, Data.CPathINI].Text)
      End If
    End If
    
    CtrlPressed = False
    ShiftPressed = False
    AltPressed = False
    
    'Doesn't need to be here (Or should it only be here?) - Only be here!
    If Key.Code = Key["F5"] Then ReScanItems()
    If Key.Code = Key["ESC"] Then Me.Close 'Quit
    
    If Key.Code = Key["F7"] Then 'Change Modes
      If LLMod.StoreMode = 0 Then
        LLMod.StoreMode = 1
      Else
        LLMod.StoreMode = 0
      End If
      ReScanItems()
    End If  
    
    If Key.Code = Key["F8"] Then MySettings.Show 'Settings
    
    If Key.Code = Key["F3"] Then AddManualLocation()
    
    If Key.Code = Key["F9"] Then Data.Show
    
    If Key.Code = Key["F11"] Then
      If LLM.FullScreenMode = False Then
        LLM.FullScreenMode = True        
      Else
        LLM.FullScreenMode = False
      End If
      FullScreenToggle()
    End If
End

Public Sub AddManualLocation()
  Dim I As Integer
  Dialog.Title = "Choose a Folder to Scan for Items"
  Dialog.Path = User.Home
  Dialog.FilterIndex = 0
  If Dialog.SelectDirectory() Then
    Return ' User pressed Cancel -
  Endif
  If ManualLocationCount >= 1 Then
    For I = 0 To ManualLocationCount - 1
      If ManualLocation[I] = Dialog.Path Then Return ' Don't add existing location to manual locations
    Next
  End If
  ManualLocation[ManualLocationCount] = Dialog.Path
  ManualLocationCount = ManualLocationCount + 1
  'Add selected folder and save to manual folder paths
  SaveManualLocations      
  'Rescan all items
  'Clear All Known Items first
  Data.ClearDataFields() 'This now does the Column Adding and naming scheme
  'Get new items
  GetItemPaths()
  'Redo Categories
  GenerateCategoryList()
  'Redo main Lists
  GenerateMainList()   
  
End


Public Sub Category_KeyRelease()
  Category_Click() 'Click Category
    
  If LLMod.StoreMode = 0 And Key.Code = Key["A"] And Key.Control Then SelectAll()
  If LLMod.StoreMode = 0 And Key.Code = Key["N"] And Key.Control Then SelectNone()
  If LLMod.StoreMode = 0 And Key.Code = Key["I"] And Key.Control Then SelectInvert()
  
  'If Key.Code = Key["F5"] Then ReScanItems() 'Moved to form event
End

Public Sub Items_KeyRelease()
  Items_Click() 'Click Item
  If LLMod.StoreMode = 0 And Key.Code = Key.Space Then Items_DblClick()   
  If LLMod.StoreMode = 1 Then 
    
    If Key.Shift Then
      ShiftPressed = True      
    Else
      ShiftPressed = False
    End If
    If Key.Code = Key.Enter Or If Key.Code = Key.Return Or Key.Code = 16777221 Then Items_DblClick() 'Pressing Enter on an item in Launch mode will launch it  
  End If  
    
  If LLMod.StoreMode = 0 And Key.Code = Key["A"] And Key.Control Then SelectAll()
  If LLMod.StoreMode = 0 And Key.Code = Key["N"] And Key.Control Then SelectNone()
  If LLMod.StoreMode = 0 And Key.Code = Key["I"] And Key.Control Then SelectInvert()
  
  If LLMod.StoreMode = 1 And Key.Code = Key["F"] And Key.Control Then AddFavorite
  If LLMod.StoreMode = 1 And Key.Code = Key["R"] And Key.Control Then RemoveFavorite
  
  'If Key.Code = Key["F5"] Then ReScanItems() 'Moved to form event
  
End

Public Sub SelectAll()
  Items.MoveFirst()
  Items.Item.Selected = True
  CurrentItemKey = Items.Item.Key
  Dim I As Integer  
  Dim IK As Integer
  AutoSelect = True
  IK = CurrentItemKey
  For I = 0 To Items.Count - 1 ' Need to add refID instead of using I below for both subs    
    Data.Items[Items.Keys[I] - 1, Data.CSelected].Text = "T" 'Because I copy the key from the main db I can use the list's key for the 
    'GenerateMainList() ' Draw Selection
    CurrentItemKey = IK
    If CurrentItemKey >= 0 Then Items[CurrentItemKey].Selected = True     
  Next  
  GenerateMainList() ' Draw Selection, Only have to do this the once, way faster
  AutoSelect = False
End
Public Sub SelectNone()
  Dim I As Integer
  Dim IK As Integer
  AutoSelect = True
  IK = CurrentItemKey
  For I = 0 To Items.Count - 1    
    Data.Items[Items.Keys[I] - 1, Data.CSelected].Text = "F" 'Because I copy the key from the main db I can use the list's key for the 
    'GenerateMainList() ' Draw Selection
    CurrentItemKey = IK
    If CurrentItemKey >= 0 Then Items[CurrentItemKey].Selected = True     
  Next
  GenerateMainList() ' Draw Selection
  AutoSelect = False
End

Public Sub SelectInvert()
  Items.MoveFirst()
  Items.Item.Selected = True
  CurrentItemKey = Items.Item.Key
  Dim I As Integer  
  Dim IK As Integer
  AutoSelect = True
  IK = CurrentItemKey
  For I = 0 To Items.Count - 1 ' Need to add refID instead of using I below for both subs        
    If Data.Items[Items.Keys[I] - 1, Data.CSelected].Text = "T" Then
      Data.Items[Items.Keys[I] - 1, Data.CSelected].Text = "F" 
    Else
      Data.Items[Items.Keys[I] - 1, Data.CSelected].Text = "T"
    End If
    'GenerateMainList() ' Draw Selection
    CurrentItemKey = IK
    If CurrentItemKey >= 0 Then Items[CurrentItemKey].Selected = True     
  Next  
  GenerateMainList() ' Draw Selection
  AutoSelect = False
End


Public Sub StartButTab_GotFocus()
  Try StartButton.Picture = Theme.Res[4].Picture.Stretch(StartButton.Width, StartButton.Height)
End

Public Sub StartButTab_LostFocus()
  Try StartButton.Picture = Theme.Res[3].Picture.Stretch(StartButton.Width, StartButton.Height)
End

Public Sub StartButTab_Click()
  StartPushed()
End

Public Sub LoadTheme()
  'Load Theme.ini
  Dim hFile As File
  Dim sLine As String
  Dim ThemeFile As String
  ThemeFile = LLM.AppPath & "/Themes/Theme.ini"
  If LLMod.StoreMode = 1 Then
   ThemeFile = LLM.AppPath & "/Themes/ThemeLauncher.ini"
  End If
  hFile = Open ThemeFile For Input
  Line Input #hFile, sLine
  hFile.Close
  LLM.ThemeName = Trim$(sLine)
  
  'Load Theme
  Screenshot.Border = 0
  
  Try LLM.Wallpaper = Picture.Load(LLM.AppPath & "/Themes/" & LLM.ThemeName & "/Wallpaper.jpg")
  Try LLM.Screenshot = Picture.Load(LLM.AppPath & "/Themes/" & LLM.ThemeName & "/Screenshot.jpg")
  Try LLM.Icon = Picture.Load(LLM.AppPath & "/Themes/" & LLM.ThemeName & "/Icon.png")
  Try LLM.StartButton = Picture.Load(LLM.AppPath & "/Themes/" & LLM.ThemeName & "/StartButton.png")
  
  If LLMod.StoreMode = 0 Then
    Description.Text = "Welcome to LastOSLinux Store, install your apps and games."
  Else
    Description.Text = "Welcome to LastOSLinux Launcher, play the games you've installed from the LastOSLinux Store.\n\nPress Ctrl + Break at any time to quit a Windows game and reset the screen resolution.\n\nHold in shift when clicking or pressing enter, or right click the start button to pick a screen resolution to make older Windows games work."
  End If
  'Store Theme files in a hidden form
  Theme.Res.Clear 'NEVER use clear???
  
  Theme.ResCount = 0
  Theme.Res.Add(Theme.ResCount, Theme.ResCount, LLM.Wallpaper)
  Theme.ResCount = Theme.ResCount + 1
  Theme.Res.Add(Theme.ResCount, Theme.ResCount, LLM.Icon)
  Theme.ResCount = Theme.ResCount + 1
  Theme.Res.Add(Theme.ResCount, Theme.ResCount, LLM.Screenshot)
  Theme.ResCount = Theme.ResCount + 1
  Theme.Res.Add(Theme.ResCount, Theme.ResCount, LLM.StartButton)
  
  'Start Button Hover
  Try TmpImage = Image.Load(LLM.AppPath & "/Themes/" & LLM.ThemeName & "/StartButtonHover.png")
  
  Theme.ResCount = Theme.ResCount + 1
  Try Theme.Res.Add(Theme.ResCount, Theme.ResCount, TmpImage.Picture)
  
  'Set Fonts and Colors  
  Categories.Foreground = LLM.SetTitleCol
  ItemTitle.Foreground = LLM.SetTitleCol  
    
  Title.Font = Font[LLM.SetTitleFont]
  Title.Foreground = LLM.SetTitleCol    
  Categories.Font = Font[LLM.SetTitleFont]
  Categories.Foreground = LLM.SetTitleCol
  ItemTitle.Font = Font[LLM.SetTitleFont]
  ItemTitle.Foreground = LLM.SetTitleCol
    
  Stats.Foreground = LLM.SetStatsCol
  Stats.Font = Font[LLM.SetStatsFont]
  
  MiniInstaller.Stats.Foreground = LLM.SetStatsCol
  MiniInstaller.Stats.Font = Font[LLM.SetStatsFont]
    
  Category.Font = Font[LLM.SetListFont]
  Category.Foreground = LLM.SetCategoryCol
    
  Description.Font = Font[LLM.SetDescriptionFont]
  Description.Foreground = LLM.SetDescriptionCol
    
  Items.Foreground = LLM.SetItemCol
  Items.Font = Font[LLM.SetListFont]
  
  'Meta Fonts
  URLTit.Font = Font[LLM.SetMetaFont]
  CategoryTit.Font = Font[LLM.SetMetaFont]
  PublisherTit.Font = Font[LLM.SetMetaFont]
  ReleasedTit.Font = Font[LLM.SetMetaFont]
  InstallSizeTit.Font = Font[LLM.SetMetaFont]
  URLTit.Foreground = LLM.SetMetaCol
  CategoryTit.Foreground = LLM.SetMetaCol
  PublisherTit.Foreground = LLM.SetMetaCol
  ReleasedTit.Foreground = LLM.SetMetaCol
  InstallSizeTit.Foreground = LLM.SetMetaCol
  
  ItemURL.Font = Font[LLM.SetMetaFont]
  ItemCategory.Font = Font[LLM.SetMetaFont]
  ItemPublisher.Font = Font[LLM.SetMetaFont]
  ItemReleased.Font = Font[LLM.SetMetaFont]
  ItemInstallSize.Font = Font[LLM.SetMetaFont]
  
  ItemURL.Foreground = LLM.SetMetaCol
  ItemCategory.Foreground = LLM.SetMetaCol
  ItemPublisher.Foreground = LLM.SetMetaCol
  ItemReleased.Foreground = LLM.SetMetaCol
  ItemInstallSize.Foreground = LLM.SetMetaCol
  
  
  'Set any to bold
  Categories.Font.Bold = LLM.SetTitlesBold
  ItemTitle.Font.Bold = LLM.SetTitlesBold
  Title.Font.Bold = LLM.SetTitlesBold
  
  Category.Font.Bold = LLM.SetListBold
  Items.Font.Bold = LLM.SetListBold
  
  Description.Font.Bold = LLM.SetDescriptionBold
  
  
  MiniInstaller.Background = LLM.SetBGCol
  MiniInstaller.ListInstall.Background = LLM.SetBGCol
  MiniInstaller.ListInstall.Foreground = LLM.SetItemCol
  MiniInstaller.ListInstall.Font = Font[LLM.SetListFont]
  
  If FirstRun = False Then LoadingScreen.LoadStyle(LLM.AppPath & "/Themes/" & LLM.ThemeName & "/Style.ini") ' The loading screen loads it in the first run to make the loading screen display correctly (doesn't hurt to load it twice, but may as well skip it)
  
  'Set Font heights last
  Items.Font.Size = ScaleItems
  Category.Font.Size = ScaleItems
  Description.Font.Size = ScaleDescription      
  
End

Public Sub AddFavorite()
  Dim I As Integer  
  If CurrentCat = "Favorites" Then Return' Don't need to add it twice
  If Items[Items.Current.Key] = Null Then Return 'No Item Text, skip
  For I = 0 To FavCount - 1
    If Lower(Favorites[I]) = Lower(Items[Items.Current.Key].Text) Then Return 'Don't add Existing
  Next  
  Favorites[FavCount] = Trim(Items[Items.Current.Key].Text)
  FavCount = FavCount + 1
  SaveFavorites
End

Public Sub RemoveFavorite()
  Dim I As Integer  
  If Items[Items.Current.Key] = Null Then Return 'No Item Text, skip
  For I = 0 To FavCount - 1
    If Lower(Favorites[I]) = Lower(Items[Items.Current.Key].Text) Then
      Favorites[I] = "" ' Remove from Favorites
      If CurrentCat = "Favorites" Then GenerateMainList 'Make sure to remove from favorites displayed
      SaveFavorites
      Return 'Only need to remove one
    End If
  Next
  SaveFavorites      
End


Public Sub SaveFavorites()
  Dim I As Integer
  Dim FavOut As String = ""
  If Exist(LLM.AppPath & "/Favorites.ini") Then Try Kill (LLM.AppPath & "/Favorites.ini")
  For I = 0 To FavCount - 1
    If Favorites[I] <> "" Then FavOut &= Favorites[I] & Chr(10)
  Next
  Try File.Save(LLM.AppPath & "/Favorites.ini", FavOut)        
End

Public Sub LoadPresetFile(InPreset As String)
  InPreset = Trim(InPreset)
  'If Right(InPreset, 7) = ".gambas" Then InPreset = ""
  If Right(InPreset, 4) <> ".ini" Then InPreset = "" 'If not the right filetype, don't attempt to load it
  
  Dim I, J, K As Integer
  Dim FileIn As String
  Dim Itm As String[]
  Dim BuildTypeStr As String
  Dim BT2 As String
  Dim Test As String
  Dim VerS1 As String
  Dim VerS2 As String
  Dim Ver1 As Integer
  Dim Ver2 As Integer
  Dim NotItem As Boolean
  Dim ItemNameVersion As String
  
  
  Test = Trim(InPreset)
  InPreset = ""
  If Test = "" Then 
    'Do Nothing
  Else
    If Exist(Test) = False Then Test = LLMod.Slashed(LLM.AppPath) & "/Presets/" & Test
    
    If Exist(Test) = True Then
      FileIn = Test    
      Try InPreset = File.Load(FileIn)
      
      InPreset = Replace(InPreset, Chr(13), Chr(10)) ' Convert to chr(10) not Chr(13)
      
      Itm = Split(InPreset, Chr(10))
      
      'Unselect everything
      For I = 0 To LLM.DataItemsRows
        Data.Items[I, Data.CSelected].Text = "F"
      Next
      
      For J = 0 To Itm.Count - 1
        If Trim(Itm[j]) = "" Then Continue 'Skip Empty lines
        
        If Left(Itm[J], 1) = 1 Then BuildTypeStr = "ssApp"
        If Left(Itm[J], 1) = 2 Then BuildTypeStr = "ppApp"
        If Left(Itm[J], 1) = 3 Then BuildTypeStr = "ppGame"
        If Left(Itm[J], 1) = 4 Then BuildTypeStr = "LLApp"
        If Left(Itm[J], 1) = 5 Then BuildTypeStr = "LLGame"
        For I = 0 To LLM.DataItemsRows
          If Data.Items[I, Data.CBuildType].Text = BuildTypeStr Then 'Correct Build Type
            If Lower(Replace(Data.Items[I, Data.CTitleName].Text, " ", "")) = Right(Itm[J], Len(Itm[J]) - 2) Then ' Reduced Name matches
              'Select Item
              'Do Version Check here and skip if older
              ItemNameVersion = Data.Items[I, Data.CTitleName].Text
              NotItem = False
               For K = 0 To LLM.DataItemsRows        
                 If K <> I And Data.Items[K, Data.CTitleName].Text = ItemNameVersion Then
                   'It's the same title name but not itself, check version number, else hide duplicate/older
                   If Trim(Data.Items[I, Data.CVersion].Text) = "" Then 'No version, can't compare, just add it for now
                   Else
                     If Trim(Data.Items[K, Data.CVersion].Text) <> "" Then ' Don't compare to empty version ones, Pointless
                        VerS1 = Lower(Trim(Data.Items[I, Data.CVersion].Text)) 'The item we are deciding to include or not
                        VerS2 = Lower(Trim(Data.Items[K, Data.CVersion].Text)) 'The item we compare to
                        'Remove all common extras so it's more compatible to compare versions
                        VerS1 = Replace(VerS1, "version", "")
                        VerS1 = Replace(VerS1, "build", "")
                        VerS1 = Replace(VerS1, "v", "")
                        VerS1 = Replace(VerS1, "r1", "")
                        VerS1 = Replace(VerS1, "r2", "")
                        VerS1 = Replace(VerS1, "r3", "")
                        VerS1 = Replace(VerS1, "r4", "")
                        VerS1 = Replace(VerS1, "-", "")
                        VerS2 = Replace(VerS2, "version", "")
                        VerS2 = Replace(VerS2, "build", "")
                        VerS2 = Replace(VerS2, "v", "")
                        VerS2 = Replace(VerS2, "r1", "")
                        VerS2 = Replace(VerS2, "r2", "")
                        VerS2 = Replace(VerS2, "r3", "")
                        VerS2 = Replace(VerS2, "r4", "")
                        VerS2 = Replace(VerS2, "-", "")
                        Ver1 = 0
                        Ver2 = 0
                        Try Ver1 = Val(VerS1)
                        Try Ver2 = Val(VerS2)
                        
                        BT2 = Trim(Data.Items[K, Data.CBuildType].Text)
                        
                        If BT2 = BuildTypeStr Then 'Only compare if they are the same build type
                          If Ver1 >= Ver2 Then 'Should it be >= or just >, it should be >= otherwise they all hide when including r2 etc, better to show a vew too many than none at all                        
                          Else
                            NotItem = True 'Skips older item here
                            Continue 'Only take one newer to make it obsolete
                          End If
                        End If
                      End If
                  End If
                 End If
              Next
              If NotItem = True Then Continue 'Skips older items
              
              Data.Items[I, Data.CSelected].Text = "T"
              Break 'Only select one (It waits until it's on the newest or it's Unique before setting it to true.
            End If
          End If
        Next  
      Next     
    End If
  End If
  'Must do this every time as it's called from Open Form to only draw once
  GenerateMainList() ' Draw Selection
  
End

Public Sub LoadPreset()
  Dim FileIn As String

  Dialog.Title = "Choose a Preset ini file"
  Dialog.Filter = ["*.ini", "Preset File"]  
  If Exist(User.Home & "/Desktop") Then Dialog.Path = User.Home & "/Desktop"
  If Exist(LLM.AppPath) Then Dialog.Path = LLM.AppPath
  If Exist(LLM.AppPath & "/Presets") Then Dialog.Path = LLM.AppPath & "/Presets"
  Dialog.FilterIndex = 0
  If Dialog.OpenFile() Then
    Return ' User pressed Cancel -
  Endif
  FileIn = Dialog.Path
  If Not Exist(FileIn) Then Return
  LoadPresetFile(FileIn)
End


Public Sub SavePreset()
  Dim FileOut As String
  Dim OutPreset As String
  Dim I As Integer
  Dim BuildTypeNum As Integer
  OutPreset = ""
  If LLM.DataItemsRows < 0 Then Return
  For I = 0 To LLM.DataItemsRows
    If Data.Items[I, Data.CSelected].Text = "T" Then
      If Data.Items[I, Data.CBuildType].Text = "ssApp" Then BuildTypeNum = 1
      If Data.Items[I, Data.CBuildType].Text = "ppApp" Then BuildTypeNum = 2
      If Data.Items[I, Data.CBuildType].Text = "ppGame" Then BuildTypeNum = 3
      If Data.Items[I, Data.CBuildType].Text = "LLApp" Then BuildTypeNum = 4
      If Data.Items[I, Data.CBuildType].Text = "LLGame" Then BuildTypeNum = 5
      OutPreset &= Str(BuildTypeNum) & "|" & Lower(Replace(Data.Items[I, Data.CTitleName].Text, " ", "")) & Chr(10) 'Make Lower and remove spaces
    End If
  Next
  Dialog.Title = "Save a Preset ini file"
  Dialog.Filter = ["*.ini", "Preset File"]  
  If Exist(User.Home & "/Desktop") Then Dialog.Path = User.Home & "/Desktop/MyPreset.ini"
  If Exist(LLM.AppPath) Then Dialog.Path = LLM.AppPath & "/MyPreset.ini"
  If Exist(LLM.AppPath & "/Presets") Then Dialog.Path = LLM.AppPath & "/Presets/MyPreset.ini"
  Dialog.FilterIndex = 0
  If Dialog.SaveFile() Then
    Return ' User pressed Cancel -
  Endif
  FileOut = Dialog.Path
  Try File.Save(FileOut, OutPreset)
End


Public Sub SaveCurrentList()
  Dim I As Integer
  Dim OutputList As String
  Dim FileOut As String
  Dim IK As Integer
  AutoSelect = True
  IK = CurrentItemKey
  OutputList = ""
  Items.MoveFirst()
  For I = 1 To Items.Count 'This is the only way to access them in order as shown, so doesn't use ref keys
    OutputList &= Items.Item.Text & Chr(10)    
    Items.MoveNext()
  Next
  CurrentItemKey = IK
  FileOut = User.Home & "/Desktop/MyList.txt"
  Try File.Save(FileOut, OutputList)
  AutoSelect = False
End

Public Sub Items_MouseDown()  
  If Mouse.Right Then
    MouseRight = True    
  Else
    MouseRight = False
  Endif
End


Public Sub Items_MouseUp() 'Resets mouse checks
  If MouseRight = True Then 'Show Context Menu here
    DoContextMenu() 'Move to mouse up so item changes first so context menu for items work as expected
  End If
  MouseRight = False
  'Stop Event
End

Public Sub WaitJustASecond_Timer()
  WaitJustASecond.Enabled = False
  WaitASec = False
End


Public Sub Items_KeyPress()
  If Key.Control Then Return 'Skip any presses with Ctrl Held in
  If Key.Alt Then Return 'Skip any presses with Alt Held in
  If Key.Shift Then Return 'Skip any presses with Shift Held in
  Dim I As Integer
  '48 to 57 = 0,1...9
  '65 to 90 = a to z
  If (Key.code >= 48 And Key.code <= 57) Or (Key.code >= 65 And Key.code <= 90) Then 'Allow pressing the first letter to cycle through items with that as first letter
    If Items.Count >= 1 Then 
      If Items.Item <> Null Then
        If Left(Items.Item.Text, 1) <> Chr(Key.Code) Then
          Items.MoveFirst 'If pressed a key thats same as current item, move to next one
        Else
          Items.MoveNext
        End If
      End If
      For I = 0 To Items.Count - 1
        If Items.Item <> Null Then
          If Left(Items.Item.Text, 1) = Chr(Key.Code) Then
            Items.Item.Selected = True
            Break          
          End If
          Items.MoveNext
        End If
        If Items.Item = Null Then Items.MoveFirst ' Jump back to top if gone off the deep end
      Next 
    End If
  End If
End

Public Sub Category_KeyPress()
  If Key.Control Then Return 'SKip any presses with Ctrl Held in
  Dim I As Integer
  '48 to 57 = 0,1...9
  '65 to 90 = a to z
  If (Key.code >= 48 And Key.code <= 57) Or (Key.code >= 65 And Key.code <= 90) Then 'Allow pressing the first letter to cycle through items with that as first letter
    If Category.Count >= 1 Then 
      If Category.Item <> Null Then
        If Left(Category.Item.Text, 1) <> Chr(Key.Code) Then
          Category.MoveFirst 'If pressed a key thats same as current item, move to next one
        Else
          Category.MoveNext
        End If
      End If
      For I = 0 To Category.Count - 1
        If Category.Item <> Null Then
          If Left(Category.Item.Text, 1) = Chr(Key.Code) Then
            Category.Item.Selected = True
            Break          
          End If
          Category.MoveNext
        End If
        If Category.Item = Null Then Category.MoveFirst ' Jump back to top if gone off the deep end
      Next 
    End If
  End If
End

Public Sub MakeDesktop(RefID As Integer) 'This only gets used by Launcher mode so multi shortcuts are per item anyway
  Dim DesktopFile As String
  Dim DesktopContent As String
  Dim DesktopOutPath As String = User.Home & "/Desktop/"
  
  DesktopFile = Replace(Data.Items[RefID, Data.CLnkTitle].Text, " ", " ") & ".desktop" ' I did have it replced with ., Works fine with spaces though
  
  DesktopContent = "[Desktop Entry]" & Chr(10)
  DesktopContent &= "Type=Application" & Chr(10)
  DesktopContent &= "Version=1.0" & Chr(10)
  DesktopContent &= "Name=" & Data.Items[RefID, Data.CLnkTitle].Text & Chr(10)
  If Lower(Data.Items[RefID, Data.CBuildType].Text) = "llapp" Or Lower(Data.Items[RefID, Data.CBuildType].Text) = "llgame" Then
    DesktopContent &= "Exec=" & LLMod.ExpPath(Data.Items[RefID, Data.CLnkExec].Text) & Chr(10)
  Else 'Windows item
    DesktopContent &= "Exec=wine " & Chr(34) & LLMod.ExpPath(Data.Items[RefID, Data.CLnkExec].Text) & Chr(34) & Chr(10)
  End If
  DesktopContent &= "Path=" & LLMod.ExpPath(Data.Items[RefID, Data.CLnkRunPath].Text) & Chr(10)
  DesktopContent &= "Comment=" & Data.Items[RefID, Data.CLnkComment].Text & Chr(10)
  If LLMod.ExpPath(Data.Items[RefID, Data.CLnkIcon].Text) <> "" Then 
    DesktopContent &= "Icon=" & LLMod.ExpPath(Data.Items[RefID, Data.CLnkIcon].Text) & Chr(10) 'Use Lnk icon if provided
  Else
    DesktopContent &= "Icon=" & LLMod.ExpPath(Data.Items[RefID, Data.CFileIcon].Text) & Chr(10) ' Else use Store Icon
  End If
  DesktopContent &= "Categories=" & Data.Items[RefID, Data.CLnkCategories].Text & Chr(10)
  DesktopContent &= "Terminal=" & Data.Items[RefID, Data.CLnkTerminal].Text & Chr(10)
  ''''If LLBuildType = "LLGame" Then DesktopContent &= "PrefersNonDefaultGPU=true" & Chr(10) 'Make games use the GPU, it's a Mint Thing, but I don't think it'll cause issues. * I think this is an old trick, when you have the correct drivers setup, this isn't needed, so don't include it as on default.
  File.Save(DesktopOutPath & DesktopFile, DesktopContent)
  Chmod DesktopOutPath & DesktopFile To "rwxrwxr--" 'Make .desktop file executable
  
  Message("Shortcut created on desktop for:" & Chr(10) & Chr(10) & Data.Items[RefID, Data.CTitleName].Text)  
End

'************************************************* CONTEXT MENU STUFF ******************************************

Public Sub DoContextMenu()
  Dim hMenu As Menu
  Dim SelectMenu As Menu
  Dim SortMenu As Menu
  Dim HideMenu As Menu
  
  ContextMenu.Children.Clear
  
  If LLMod.StoreMode = 1 Then
    hMenu = New Menu(ContextMenu) As "POP"
    hMenu.Name = "RunWithResolution"
    hMenu.Text = "Run With Resolution"
    hMenu.Shortcut = "Shift+Enter"
    hMenu = New Menu(ContextMenu) As "POP" 'Spacer
  End If
  
'Select Menu
  If LLMod.StoreMode = 0 Then 'Install Mode only
    SelectMenu = New Menu(ContextMenu, False)
    SelectMenu.Text = "Select"
    
    hMenu = New Menu(SelectMenu) As "POP"
    hMenu.Name = "Select1"
    hMenu.Text = "Select All"    
    hMenu.Shortcut = "Ctrl+A" ' No need for hotkeys listing, makes it ugly.
    hMenu = New Menu(SelectMenu) As "POP"
    hMenu.Name = "Select2"
    hMenu.Text = "Select None"
    hMenu.Shortcut = "Ctrl+N"
    hMenu = New Menu(SelectMenu) As "POP"
    hMenu.Name = "Select3"
    hMenu.Text = "Invert Selection"
    hMenu.Shortcut = "Ctrl+I"
    hMenu = New Menu(ContextMenu) As "POP"
  End If
  
'Sorting  
  SortMenu = New Menu(ContextMenu, False)
  SortMenu.Text = "Sort"
  
  hMenu = New Menu(SortMenu) As "POP"
  hMenu.Name = "SortAlphabetical"
  hMenu.Text = "Alphabetical"
  If SortMethod = 0 Then hMenu.Checked = True
  hMenu = New Menu(SortMenu) As "POP"
  hMenu.Name = "SortUnsorted"
  hMenu.Text = "Unsorted"
  If SortMethod = 1 Then hMenu.Checked = True
  hMenu = New Menu(SortMenu) As "POP"

'Hide Items Menu  
  HideMenu = New Menu(ContextMenu, False)
  HideMenu.Text = "Hide"
  hMenu = New Menu(HideMenu) As "POP"
  If LLMod.StoreMode = 0 Then 'Install Mode only
    hMenu.Name = "HideInstalled"
    hMenu.Text = "Installed"
    If HideInstalled = True Then hMenu.Checked = True
    hMenu = New Menu(HideMenu) As "POP"
    hMenu.Name = "HideOnline"
    hMenu.Text = "Online"
    If LLM.HideOnline = True Then hMenu.Checked = True
    hMenu = New Menu(HideMenu) As "POP"
    hMenu.Name = "HideLocal"
    hMenu.Text = "Local"
    If LLM.HideLocal = True Then hMenu.Checked = True
    hMenu = New Menu(HideMenu) As "POP"
  End If
  
  hMenu.Name = "HidePaid"
  hMenu.Text = "Paid Items"
  If HidePaid = True Then hMenu.Checked = True
  hMenu = New Menu(HideMenu) As "POP"
  
  hMenu.Name = "HideWindows"
  hMenu.Text = "Windows Items"
  If HideWindows = True Then hMenu.Checked = True
  hMenu = New Menu(HideMenu) As "POP"
  hMenu.Name = "HideLinux"
  hMenu.Text = "Linux Items"
  If HideLinux = True Then hMenu.Checked = True
  hMenu = New Menu(HideMenu) As "POP"
  If LLMod.StoreMode = 0 Then 'Install Mode only
    hMenu = New Menu(HideMenu) As "POP" 'Spacer
    hMenu.Name = "HideApps"
    hMenu.Text = "Apps"
    If HideApps = True Then hMenu.Checked = True
    hMenu = New Menu(HideMenu) As "POP"
    hMenu.Name = "HideGames"
    hMenu.Text = "Games"
    If HideGames = True Then hMenu.Checked = True
    hMenu = New Menu(HideMenu) As "POP"
  End If    
  hMenu = New Menu(ContextMenu) As "POP" 'Spacer
  'Load and Save Presets
  If LLMod.StoreMode = 0 Then 'Install Mode only    
    hMenu = New Menu(ContextMenu) As "POP"
    hMenu.Name = "LoadPreset"
    hMenu.Shortcut = "Ctrl+O"
    hMenu.Text = "Load From Preset"
    hMenu = New Menu(ContextMenu) As "POP"
    hMenu.Name = "SavePreset"
    hMenu.Shortcut = "Ctrl+S"
    hMenu.Text = "Save To Preset"
  End If
  
  If LLMod.StoreMode = 1 Then 'Launcher Mode
    hMenu = New Menu(ContextMenu) As "POP"
    hMenu.Name = "AddFavorite"
    hMenu.Shortcut = "Ctrl+F"
    hMenu.Text = "Add To Favorites"
    hMenu = New Menu(ContextMenu) As "POP"
    hMenu.Name = "RemoveFavorite"
    hMenu.Shortcut = "Ctrl+R"
    hMenu.Text = "Remove From Favorites"
    hMenu = New Menu(ContextMenu) As "POP"
    hMenu.Name = "MakeDesktop"
    hMenu.Shortcut = "Alt+D"
    hMenu.Text = "Make Desktop Shortcut"
    hMenu = New Menu(ContextMenu) As "POP"
    hMenu.Name = "BuildToDesktop"
    hMenu.Shortcut = "Alt+A"
    hMenu.Text = "Auto Build To Desktop"
  End If
  
  hMenu = New Menu(ContextMenu) As "POP"
  hMenu.Name = "SaveCurrentList"
  hMenu.Shortcut = "Alt+S"
  hMenu.Text = "Save Current List"  
  hMenu = New Menu(ContextMenu) As "POP"
  hMenu.Name = "AddManualLocation"
  hMenu.Shortcut = "F3"
  hMenu.Text = "Add Manual Location"
  hMenu = New Menu(ContextMenu) As "POP"
  hMenu.Name = "ReScanItems"
  hMenu.Shortcut = "F5"
  hMenu.Text = "(Re)Scan For Items"
  hMenu = New Menu(ContextMenu) As "POP"
  hMenu.Name = "OpenItemLocation"
  hMenu.Text = "Open Item Location"
  
  hMenu = New Menu(ContextMenu) As "POP"
  hMenu.Name = "EditItem"
  hMenu.Shortcut = "Alt+E"
  hMenu.Text = "Edit Item"

  hMenu = New Menu(ContextMenu) As "POP" 'Spacer
    
  If LLMod.StoreMode = 0 Then     
    hMenu = New Menu(ContextMenu) As "POP"
    hMenu.Name = "BuildRepository"
    hMenu.Text = "Build Repository"
  End If
    
  hMenu = New Menu(ContextMenu) As "POP"
  hMenu.Name = "ChangeMode"
  hMenu.Shortcut = "F7"
  hMenu.Text = "Change Mode (Store/Launcher)"
  
  hMenu = New Menu(ContextMenu) As "POP"
  hMenu.Name = "Debugging"
  hMenu.Shortcut = "F9"
  hMenu.Text = "Debugging"
  
  hMenu = New Menu(ContextMenu) As "POP"
  hMenu.Name = "FullScreen"
  hMenu.Shortcut = "F11"
  hMenu.Text = "FullScreen Toggle"
  
  hMenu = New Menu(ContextMenu) As "POP"
  hMenu.Name = "MySettings"
  hMenu.Shortcut = "F8"
  hMenu.Text = "Settings"
  
  ContextMenu.Popup(Mouse.ScreenX, Mouse.ScreenY)
End

Public Sub POP_Click()  
  Dim I As Integer
  Dim OpenPath As String 
  
  Select Last.Name
    Case "Select1"            
      SelectAll()
    Case "Select2"      
      SelectNone()
    Case "Select3"      
      SelectInvert()
    Case "SortAlphabetical"      
      SortMethod = 0 'Alphabetical
      GenerateMainList()
    Case "SortUnsorted"      
      SortMethod = 1 'Unsorted      
      GenerateMainList()
    Case "HideInstalled"            
      If HideInstalled = False Then ' Toggle Showing installed items
        HideInstalled = True
      Else
        HideInstalled = False
      End If
      'GenerateCategoryList()
      GenerateMainList()
    Case "HideOnline"            
      If LLM.HideOnline = False Then ' Toggle Showing Online items
        LLM.HideOnline = True
      Else
        LLM.HideOnline = False
      End If
      'GenerateCategoryList()
      GenerateMainList()
      
    Case "HideLocal"            
      If LLM.HideLocal = False Then ' Toggle Showing Local items
        LLM.HideLocal = True
      Else
        LLM.HideLocal = False
      End If
      'GenerateCategoryList()
      GenerateMainList()
        
    Case "HidePaid"
      If HidePaid = False Then ' Toggle Showing Paid items
        HidePaid = True
      Else
        HidePaid = False
      End If
      'GenerateCategoryList()
      GenerateMainList()
    Case "HideWindows"
      If HideWindows = False Then ' Toggle Showing Windows items
        HideWindows = True
      Else
        HideWindows = False
      End If
      'GenerateCategoryList()
      GenerateMainList()
    Case "HideLinux"
      If HideLinux = False Then ' Toggle Showing Linux items
        HideLinux = True
      Else
        HideLinux = False
      End If
      'GenerateCategoryList()
      GenerateMainList()
    Case "HideApps"
      If HideApps = False Then ' Toggle Showing App items
        HideApps = True
      Else
        HideApps = False
      End If
      'GenerateCategoryList()
      GenerateMainList()
    Case "HideGames"
      If HideGames = False Then ' Toggle Showing Game items
        HideGames = True
      Else
        HideGames = False
      End If
      'GenerateCategoryList()
      GenerateMainList()
    Case "LoadPreset"      
      LoadPreset()
    Case "SavePreset"
      SavePreset()
    Case "AddFavorite"      
      AddFavorite
    Case "RemoveFavorite"
      RemoveFavorite      
    Case "MakeDesktop"
      If Items[Items.Current.Key] = Null Then Return 'No Item Text, skip
      MakeDesktop(Items.Current.Key - 1)
    Case "BuildToDesktop"
      If Items[Items.Current.Key] = Null Then Return 'No Item Text, skip
      BuildToDesktop(Data.Items[Items.Current.Key - 1, Data.CPathINI].Text)      
    Case "SaveCurrentList" 
      SaveCurrentList()
    Case "ReScanItems"   
      ReScanItems()
    Case "OpenItemLocation"
      If Items[Items.Current.Key] = Null Then Return 'No Item Text, skip
      
      OpenPath = Data.Items[Items.Current.Key - 1, Data.CPathINI].Text
      
      If Right(OpenPath, 1) <> "" Then
        OpenPath = Left(OpenPath, LLMod.InStrRevSingle(OpenPath, "/"))
      End If
      If Exist(OpenPath) Then Shell "xdg-open " & Chr(34) & OpenPath & Chr(34) ' Open with default windows manager
    Case "EditItem"
      If Items[Items.Current.Key] = Null Then Return 'No Item Text, skip
      
      EditItem()
    Case "AddManualLocation"
      Dialog.Title = "Choose a Folder to Scan for Items"
      Dialog.Path = User.Home
      Dialog.FilterIndex = 0
      If Dialog.SelectDirectory() Then
        Return ' User pressed Cancel -
      Endif
      If ManualLocationCount >= 1 Then
        For I = 0 To ManualLocationCount - 1
          If ManualLocation[I] = Dialog.Path Then Return ' Don't add existing location to manual locations
        Next
      End If
      ManualLocation[ManualLocationCount] = Dialog.Path
      ManualLocationCount = ManualLocationCount + 1
      'Add selected folder and save to manual folder paths
      SaveManualLocations      
      'Rescan all items
      'Clear All Known Items first
      Data.ClearDataFields() 'This now does the Column Adding and naming scheme
      'Get new items
      GetItemPaths()
      'Redo Categories
      GenerateCategoryList()
      'Redo main Lists
      GenerateMainList()    
    Case "BuildRepository"
       BuildRepository()
    Case "Debugging"
       Data.Show
    Case "MySettings"
      MySettings.Show
    Case "RunWithResolution"
      ShiftPressed = True
      RunGame(CurrentItemKey)
    Case "ChangeMode"
      If LLMod.StoreMode = 0 Then
        LLMod.StoreMode = 1
      Else
        LLMod.StoreMode = 0
      End If
      ReScanItems()
    Case "FullScreen"
      If LLM.FullScreenMode = False Then
        LLM.FullScreenMode = True        
      Else
        LLM.FullScreenMode = False
      End If
      FullScreenToggle()
  End Select
End

Public Sub EditItem()
  
  If Items[Items.Current.Key] = Null Then Return 'No Item Text, skip
  
  Dim OpenPath As String
  Dim BT As String
  
  OpenPath = Data.Items[Items.Current.Key - 1, Data.CPathINI].Text
  BT = Data.Items[Items.Current.Key - 1, Data.CBuildType].Text
  If Not Exist(OpenPath) Then
    Message("Item not found or not local")
    Return
  End If
  If BT = "LLApp" Or BT = "LLGame" Then        
    Shell LLMod.Slashed(LLMod.AppPath) & "Tools/LLApp/LLApp.gambas -edit " & Chr(34) & OpenPath & Chr(34)
  Else 'SetupS
    Shell "wine " & Chr(34) & "$HOME/.wine/dosdevices/c:/Program Files/SetupS.SendTo/ssEditor/ssEditor.exe" & Chr(34) & " " & Chr(34) & OpenPath & Chr(34)
  End If

End


Public Sub FullScreenToggle()
    LastOSLinuxStoreMain.FullScreen = LLM.FullScreenMode
End


Public Sub SaveManualLocations()
  Dim I As Integer
  Dim LocOut As String = ""
  Dim FileOut As String
  If LLMod.StoreMode = 0 Then
    FileOut = LLM.AppPath & "/ManualLocations.ini"
  Else
    FileOut = LLM.AppPath & "/ManualLaunchLocations.ini"
  End If
  If Exist(FileOut) Then Try Kill (FileOut)
  For I = 0 To ManualLocationCount - 1
    If ManualLocation[I] <> "" Then LocOut &= ManualLocation[I] & Chr(10)
  Next
  Try File.Save(FileOut, LocOut)        
End

Public Sub LoadManualLocations()
  Dim I As Integer
  Dim FileIn As String
  'Load in Manual Locations if they exists
  
  If LLMod.StoreMode = 0 Then
    FileIn = LLM.AppPath & "/ManualLocations.ini"
  Else
    FileIn = LLM.AppPath & "/ManualLaunchLocations.ini"
  End If
  
  ManualLocationCount = 0
  
  Dim InFile As String
  Dim InFileSp As String[]
  If Exist(FileIn) Then
    Try InFile = File.Load(FileIn)
    InFile = Replace(InFile, Chr(13), Chr(10)) ' Convert to chr(10) not Chr(13)
    InFileSp = Split(InFile, Chr(10))
    For I = 0 To InFileSp.Count - 1
      If Trim(InFileSp[I]) <> "" Then
        ManualLocation[ManualLocationCount] = Trim(InFileSp[I])
        ManualLocationCount = ManualLocationCount + 1
      End If
    Next
  End If
End



Public Sub InstallDelay_Timer()
   InstallingItem = True
   Shell RunDelayExec Wait '  run it
   InstallingItem = False
End


Public Sub Items_DblClick()
  If WaitASec = True Then
    'Stop Event
    Return
  End If
  Dim RefsID As Integer
  If Items.Current = Null Then Return 'Dead Item
  CurrentItemKey = Items.Current.Key
  RefsID = CurrentItemKey - 1 ' Database is 0 based, list is 1 based
  CurrentItem = Items.Current.Text
  If LLMod.StoreMode = 1 Then
    'RunGame(RefsID)
    'Stop Event
    RunDelay.Enabled = True
  Else  
    
    If Data.Items[RefsID, 1].Text = "F" Then
      Data.Items[RefsID, 1].Text = "T"
      Items[Data.Items[RefsID, 0].Text].Background = LLM.SetSelectCol 'Highlight Selected
      SelectedItems = SelectedItems + 1
      Items.Refresh 'So draws change
    Else 
      Data.Items[RefsID, 1].Text = "F"
      Items[Data.Items[RefsID, 0].Text].Background = Color.Transparent 'Un Highlight
      SelectedItems = SelectedItems - 1
      Items.Refresh 'So draws change
    End If
    
      'Update Stats  
    If SelectedItems > 0 Then 
      Stats.Text = Str(SelectedItems) & "/" & Str(Items.Count) & " Items"
    Else 
      Stats.Text = Str(Items.Count) & " Items"
    End If
  End If
  'Stop Event
End


Public Sub StartButton_MouseUp()
  StartButton.Top = StartButton.Top - 1
  StartButton.Left = StartButton.Left - 1
  
  If Not Mouse.Inside(Last) Then
    If ForceStart = False Then Return 'This is the better check to see if inside the control or not, remarked out old if method
  End If
  
  If Mouse.Right Then ShiftPressed = True 'Allows pressing right mouse to start with Screen Resolution window
  
  StartPushed()
  'Stop Event
End

Public Sub RunGame(GameID As Integer)
  MoviePlayer.Stop ' Just In Case
  MovieTimer.Enabled = False 'Just in case
  Categories.SetFocus() ' This fixes the issue with the mouse not clicking items when it returns from running a game
  Wait (0.03)
  LastOSLinuxStoreMain.Hide ' Hide to run a game
  Dim PathToUse As String
  Dim BT As String
  Dim RunMe As String
  Dim LinuxRun As String
  Dim Wid As String
  Dim Hit As String
  BT = Data.Items[GameID, Data.CBuildType].Text ' BuildType
  If BT = "ppGame" Then 'It's a ppGame, use WINE
    'Use the Actual install path ?
    If Right(Data.Items[GameID, Data.CLnkRunPath].Text, 1) <> "/" Then Data.Items[GameID, Data.CLnkRunPath].Text &= "/" 'Add Slash so it works
    PathToUse = Data.Items[GameID, Data.CLnkRunPath].Text
    RunMe = LLMod.ExpPath(Data.Items[GameID, Data.CLnkRunPath].Text & Data.Items[GameID, Data.CLnkExec].Text)
    
    If Not Exist(RunMe) Then 'Use actual INI path instead Of LNK one Until I update it To generate the full path(shouldn't matter for launcher mode)
      If Right(Data.Items[GameID, Data.CPathINI].Text, 1) <> "/" Then Data.Items[GameID, Data.CPathINI].Text &= "/" 'Add Slash so it works
      PathToUse = Data.Items[GameID, Data.CPathINI].Text
      RunMe = LLMod.ExpPath(Data.Items[GameID, Data.CPathINI].Text & Data.Items[GameID, Data.CLnkExec].Text)
    End If
    If ShiftPressed = False Then 'Run Normal
      RunMe = "wine z:/" & Chr(34) & RunMe & Chr(34) 'adding Z: allows it to use ANY case letters in the path or file
    Else 'Run Virtual 1024x768
      ShiftPressed = False 'Disabled once in here
      Shell "xrandr --current | grep current | awk '{print $8}'" To Wid
      Shell "xrandr --current | grep current | awk '{print $10}'" To Hit
      
      Wid = Trim(Wid)
      Hit = Replace(Hit, ",", "")
      'Message(Wid & "x" & Hit)
      LLM.ScreenResolution = ""
      ScreenResolution.Visible = True
      While LLM.ScreenResolution = ""
        Wait (0.1)
      Wend
      
      If LLM.ScreenResolution = "Desktop" Then
        LLM.ScreenResolution = Wid & "x" & Hit
      End If
      If LLM.ScreenResolution = "Closed" Then
       'Move focus back to Items List
        LastOSLinuxStoreMain.Show ' Show once ran game
        Wait (0.03)
        Categories.SetFocus
        Wait (0.03)
        Items.SetFocus
        Wait (0.03)
        Return 'Closed screen res
      End If
      RunMe = "xrandr -s " & LLM.ScreenResolution & " && wine explorer /desktop=name," & LLM.ScreenResolution & " z:/" & Chr(34) & RunMe & Chr(34)
    End If
    LLMod.Execute(RunMe, PathToUse)
    'ForcedRes = True
    If Wid <> "" Then
      Shell "xrandr -s " & Wid & "x" & Hit
      Wait (0.3) ' Wait until it's had time to update the system so it puts it back in the right position
    End If
  Else 'Linux game
    RunMe = LLMod.ExpPath(Data.Items[GameID, Data.CLnkExec].Text) 'Expand $HOME path
    PathToUse = Data.Items[GameID, Data.CLnkRunPath].Text
    Print "Running: " & LLMod.ExpPath(PathToUse) & " " & RunMe
    'Make sure calls to links are going to work as intended
    LinuxRun = RunMe
    If LLMod.ExpPath(PathToUse) <> "" Then  
      If Exist(LLMod.Slashed(PathToUse) & RunMe) Then
        LinuxRun = Chr(34) & LLMod.Slashed(PathToUse) & RunMe & Chr(34) 'Make exec full path instead of just script/command name ' helps as unless it's a .run type of exe then it's a script and they need a path given.
      End If
    Else 'Try and add the dot skip if not found
      If Exist("./" & RunMe) Then LinuxRun = Chr(34) & "./" & RunMe & Chr(34) 'Make exec current path
    End If
    If Left(LinuxRun, 9) <> "run-1080p" Then 'This is already done
      If Left(LinuxRun, 1) <> Chr(34) Then
        LinuxRun = "exec " & Chr(34) & LinuxRun & Chr(34) 'Adding exec to the execute call fixes non run better than bash
      Else
        LinuxRun = "exec " & LinuxRun  'Adding exec to the execute call fixes non run better than bash, already had quotes
      End If
    End If
    
    If ShiftPressed = False Then 'Run Normal
      Print "Running Main: " & LinuxRun
      LLMod.Execute(LinuxRun, LLMod.ExpPath(PathToUse))'
      'LLMod.Execute(RunMe, "") ' Trying without PWD set as it's not returning when it's done, Fixes it but also has issue with some WINE ones, so will have to fix in execute
    Else 'Shift in, change res
      
      ShiftPressed = False 'Disabled once in here
      Shell "xrandr --current | grep current | awk '{print $8}'" To Wid
      Shell "xrandr --current | grep current | awk '{print $10}'" To Hit
      
      Wid = Trim(Wid)
      Hit = Replace(Hit, ",", "")
      'Message(Wid & "x" & Hit)
      LLM.ScreenResolution = ""
      ScreenResolution.Visible = True
      While LLM.ScreenResolution = ""
        Wait (0.1)
      Wend
      
      If LLM.ScreenResolution = "Desktop" Then
        LLM.ScreenResolution = Wid & "x" & Hit
      End If
      If LLM.ScreenResolution = "Closed" Then
       'Move focus back to Items List
        LastOSLinuxStoreMain.Show ' Show once ran game
        Wait (0.03)
        Categories.SetFocus
        Wait (0.03)
        Items.SetFocus
        Wait (0.03)
        Return 'Closed screen res
      End If
      
      LinuxRun = "xrandr -s " & LLM.ScreenResolution & " && " & LinuxRun 'Adding bash to the exec call fixes non run
      Print "Running Main: " & LinuxRun
      LLMod.Execute(LinuxRun, LLMod.ExpPath(PathToUse))'
      
      If Wid <> "" Then
        Shell "xrandr -s " & Wid & "x" & Hit
        Wait (0.3) ' Wait until it's had time to update the system so it puts it back in the right position
      End If
      
    End If
  End If
  'Move focus back to Items List
  LastOSLinuxStoreMain.Show ' Show once ran game
  Wait (0.03)
  Categories.SetFocus
  Wait (0.03)
  Items.SetFocus
  Wait (0.03)
  'Items.Refresh 'BAD Idea (Causes a weird delay)
  'LastOSLinuxStoreMain.Minimized = True
  'Wait (0.03)
  'LastOSLinuxStoreMain.Maximized = True
End


'************************************************* MINI-INSTALLER, RUNNING stuff ******************************************

Public Sub RunMiniInstaller()
  If Installing = True Then Return 'One at a time
  Dim ItemToInstall As Integer
  Dim TmpSudoScript As String
  
  If LLMod.StoreMode = 0 Then Installing = True
  
  LLMod.InstallingMulti = False ' Make it False until it's true
  
  Dim I As Integer
  Dim BT As String
  
  Dim ItemLocal As String
  
  'Dim RunMe As String
  Dim OldTitle As String
  Dim InstallCount As Integer
  
  'Don't start the installer until ALL existing downloads are done, Still only downloads one at a time, which is about all LastOS.org can handle anyway
  While Downloading = True 'Can't do more until it's fully downloaded
    Wait (0.01)
  Wend
  
  
  'Change Category to All, Generate Main List and step through them, else all the hidden items you previously selected install too.
  'I'll leave this one, if someone is messing about they'll get the mini installer every time
  For I = 0 To Data.Items.Rows.Count - 1
    'Check if only one item, if so then install it but don't quit main form etc.
    If Data.Items[I, Data.CSelected].Text = "T" Then InstallCount = InstallCount + 1
  Next
  
  'Make sure an items selected
  ItemToInstall = CurrentItemKey - 1  
  
  If InstallCount = 0 And ItemToInstall <> -2 Then 'Install only one item without mini installer, and only if main form has selected it (MiniInstaller is shown with -Auto)
    Try BT = Data.Items[ItemToInstall, Data.CBuildType].Text ' BuildType 'The database is 0 based so use -1   
   'Check if needed to download first and also change the paths if successful or already exists
    ItemLocal = Replace(Data.Items[ItemToInstall, Data.CFileINI].Text, "%dbpath%/", RepositoryPathLocal)
    
    If Not Exist(ItemLocal) Then 'Get it
      OldTitle = Title.Text
      Title.Text = "Downloading " & Data.Items[ItemToInstall, Data.CTitleName].Text
      Title.Refresh
      Title.Visible = False
      Wait (0.01)
      Title.Visible = True
      Wait (0.1)
    
      GetOnlineFile(Data.Items[ItemToInstall, Data.CPathINI].Text, ItemLocal)
      While Downloading = True 'Can't do more until it's fully downloaded
        Wait (0.01)
      Wend
    End If      
    Title.Text = OldTitle
  
    If BT = "ssApp" Or BT = "ppApp" Or BT = "ppGame" Then 'It's a Windows Things, use WINE      
      OldTitle = Title.Text
      
      Title.Text = "Installing " & Data.Items[ItemToInstall, Data.CTitleName].Text
      Title.Refresh
      Title.Visible = False
      Wait (0.01)
      Title.Visible = True      
      Wait (0.1) ' Lets the form Redraw before it starts installing  
      If BT = "ppApp" Or BT = "ppGame" Then
        LLMod.InstallppFile(ItemLocal)
      Else 'ssApp, still uses SetupS
        Shell "wine " & Chr(34) & ItemLocal & Chr(34) Wait 'This ties up the whole Store, no work around yet?
      End If
      If FailedDownload = False Then 'Success
        Title.Text = "Installed " & Data.Items[ItemToInstall, Data.CTitleName].Text  'OldTitle
      Else
        Title.Text = "Failed to Install " & Data.Items[ItemToInstall, Data.CTitleName].Text
      End If
    Else 'Linux Item
      OldTitle = Title.Text
      Title.Text = "Installing " & Data.Items[ItemToInstall, Data.CTitleName].Text    
      Title.Refresh
      Title.Visible = False
      Wait (0.01)
      Title.Visible = True      
      Wait (0.1) ' Lets the form Redraw before it starts installing
      LLMod.InstallLLFile(ItemLocal) ' Need to use FileINI not PathINI ' Uses Current Item value
      
      'Run the Admin Script once at the very end before hiding MiniInstaller
      'Message(LLMod.LLScriptSudoContent)
      If LLMod.LLScriptSudoContent <> "" Then 'Only run if something is in it to run
        TmpSudoScript = Temp$("LLTmp_Sudo" & Str(Rand(1, 999999))) & ".sh"
        File.Save(TmpSudoScript, LLMod.LLScriptSudoContent)
        
        LLMod.LLScriptSudoContent = "" 'Clear it once done.
        
        Try Chmod TmpSudoScript To "rwxrwxr--" 'Make sudo script file executable
        LLMod.Execute("x-terminal-emulator -e " & Chr(34) & "sudo " & Chr(39) & TmpSudoScript & Chr(39) & Chr(34), "")
        Try Kill TmpSudoScript 'Remove tmp script file
      End If  
    
      If FailedDownload = False Then 'Success
        Title.Text = "Installed " & Data.Items[ItemToInstall, Data.CTitleName].Text  'OldTitle
      Else
        Title.Text = "Failed to Install " & Data.Items[ItemToInstall, Data.CTitleName].Text
      End If
    End If
    Installing = False 'Job done   
    Return 'Just go back to main store, user can click off the item.
  End If
  
  'Build install list and go through them all  
  LastOSLinuxStoreMain.Hide 'Hide Main Form
  MiniInstaller.ListInstall.Clear ' This was used for ListView and not TableView
  LLMod.InstallingMulti = True
  
  'Change Category to All, Generate Main List and step through them, else all the hidden items you previously selected install too.
  Category.MoveFirst '(All)
  Category.Item.Selected = True
  CurrentCat = "All"
  GenerateMainList()
  Items.MoveFirst
  Items.Item.Selected = True 'Move to each item  
  InstallCount = 0
  For I = 1 To Items.Count
    Items.Item.Selected = True 'Move to each item      
    
    If Data.Items[Items.Current.Key - 1, Data.CSelected].Text = "T" Then 'Only do selected items
      InstallCount = InstallCount + 1 ' Count how many we add
      If Data.Items[Items.Current.Key - 1, Data.CPriority].Text <> "" Then
        MiniInstaller.ListInstall.Add(Data.Items[Items.Current.Key - 1, Data.CRefID].Text, Data.Items[Items.Current.Key - 1, Data.CPriority].Text & ")" & Data.Items[Items.Current.Key - 1, Data.CTitleName].Text)
      Else
        MiniInstaller.ListInstall.Add(Data.Items[Items.Current.Key - 1, Data.CRefID].Text, "5)" & Data.Items[Items.Current.Key - 1, Data.CTitleName].Text)
      End If
    End If
    Items.MoveNext
  Next
  Items.MoveFirst
  Items.Item.Selected = True 'Move to first Item on Main Form
  
  ''Old Method Below, incase the above one goes bad
  'For I = 0 To Data.Items.Rows.Count - 1
  '  If Data.Items[I, Data.CSelected].Text = "T" Then 'Only do selected items     
  '    If Data.Items[I, Data.CPriority].Text <> "" Then
  '      MiniInstaller.ListInstall.Add(Data.Items[I, Data.CRefID].Text, Data.Items[I, Data.CPriority].Text & ")" & Data.Items[I, Data.CTitleName].Text)
  '    Else
  '      MiniInstaller.ListInstall.Add(Data.Items[I, Data.CRefID].Text, "5)" & Data.Items[I, Data.CTitleName].Text)
  '    End If
  '  End If
  'Next
  'Wait (0.3) 'Redraw
  
  'MiniInstaller.Show
  'Message("Check")
  
  'Sort Order here
  MiniInstaller.ListInstall.Sorted = True ' Can only make it alphabetical for now so remove the priority number from the Title below
  Dim IT As String
  MiniInstaller.ListInstall.Sorted = False ' Turn off sorting before renaming them or they move to new sorting location.
  For I = 0 To InstallCount - 1
    IT = MiniInstaller.ListInstall[MiniInstaller.ListInstall.Keys[I]].Text
    MiniInstaller.ListInstall[MiniInstaller.ListInstall.Keys[I]].Text = Right(IT, Len(IT) - InStr(IT, ")", 1))
  Next
    
  Dim ItemINI As String
  Dim OldStats As String
  
  'Do Installs
  MiniInstaller.Show  
  Wait (0.1) 'Make sure it has time to draw the pause button
 
  MiniInstaller.ListInstall.MoveFirst()
  For I = 1 To InstallCount
    'Move Cursor to current item
    MiniInstaller.ListInstall.Item.Selected = True
    MiniInstaller.ListInstall.Item.EnsureVisible()
    
    MiniInstaller.Text = Str(I) & "/" & Str(InstallCount)
    MiniInstaller.Stats.Text = Str(I) & "/" & Str(InstallCount)
    Wait (0.07) 'Redraw so list moves (Can cause a little flicker, but more useful than being stuck at the bottom of the list or a black form not drawn at all)
    
    'Check if needed to download first and also change the paths if successful or already exists
    ItemToInstall = MiniInstaller.ListInstall.Item.Key - 1
    ItemLocal = Replace(Data.Items[ItemToInstall, Data.CFileINI].Text, "%dbpath%/", RepositoryPathLocal)
    
    If Not Exist(ItemLocal) Then 'Get it
      OldStats = MiniInstaller.Stats.Text
      MiniInstaller.Stats.Text = "Downloading..."
      GetOnlineFile(Data.Items[ItemToInstall, Data.CPathINI].Text, ItemLocal)
      While Downloading = True 'Can't do more until it's fully downloaded
        Wait (0.01)
      Wend
      MiniInstaller.Stats.Text = OldStats
    End If   
    
    
    BT = Data.Items[ItemToInstall, Data.CBuildType].Text ' BuildType    
        
    ItemINI = ItemLocal ' Grab ini file it'll install
    
    If LLM.ClosedMini = True Then Break 'Closed Form
    If BT = "ssApp" Or BT = "ppApp" Or BT = "ppGame" Then 'It's a Windows Things, use WINE      
      If BT = "ppGame" Or BT = "ppApp" Then ' FrizzleFrizzle Trying with apps, but I will need to add %Extract% support to ppApp.cmd
        LLMod.InstallppFile(ItemINI)
      Else ' It's a ssApp and SetupS can handle them for now
        'Shell "wine " & Chr(34) & Data.Items[MiniInstaller.ListInstall.Item.Key - 1, Data.CFileINI].Text & Chr(34) Wait
        LLMod.Execute("wine " & Chr(34) & ItemINI & Chr(34), Data.Items[ItemToInstall, Data.CPathINI].Text)
      End If      
    Else 'Linux Item      
      LLMod.InstallLLFile(ItemINI) ' Need to use FileINI not PathINI
    End If   
  
    If LLM.ClosedMini = True Then Break 'Closed Form
    Wait (0.07) 'Redraw  
    If LLM.ClosedMini = True Then Break 'Closed Form check 2
    'Move to Next Item
    MiniInstaller.ListInstall.MoveNext()
    While MiniInstaller.Paused = True 'If user pauses, then it really pauses
      Try Wait (0.1)
    Wend
    If LLM.ClosedMini = True Then Break 'Closed Form check 3 (want to make 100% sure we exit asap)
  Next
  
  'This will Run the Admin Script once at the very end before hiding MiniInstaller
  'Message(LLMod.LLScriptSudoContent)
  If LLMod.LLScriptSudoContent <> "" Then 'Only run if something is in it to run
    TmpSudoScript = Temp$("LLTmp_Sudo" & Str(Rand(1, 999999))) & ".sh"
    File.Save(TmpSudoScript, LLMod.LLScriptSudoContent)
        
    LLMod.LLScriptSudoContent = "" 'Clear it once done.
    
    Try Chmod TmpSudoScript To "rwxrwxr--" 'Make sudo script file executable
    LLMod.Execute("x-terminal-emulator -e " & Chr(34) & "sudo " & Chr(39) & TmpSudoScript & Chr(39) & Chr(34), "")
    Try Kill TmpSudoScript 'Remove tmp script file
  End If  
  
  If LLMod.RefreshPanel = True Then
    LLMod.RefreshPanel = False
    Shell "cinnamon --replace" 'Refresh applets so the panel shortcuts show without rebooting
  End If
  
  If LLM.QuitOnComplete = True Then
    Me.Close
    Quit
  End If
  
  MiniInstaller.Hide
  LoadingScreen.Show
  Try Wait (0.1)
  
  'Clear All Known Items first
  Data.ClearDataFields() 'This now does the Column Adding and naming scheme
  'Get new items    
  GetItemPaths()  
  'Redo Categories
  GenerateCategoryList()
  'Redo main Lists
  GenerateMainList()  
  MiniInstaller.Hide
  'Move back to first item
  Items.MoveFirst()
 'Move Cursor to current item
  Items.Item.Selected = True
  Items_Click() 'Load data and screenshot etc  
  LoadingScreen.Hide
  LastOSLinuxStoreMain.Show
  Installing = False 'Job done   
  Title.Text = "Installed " & Str(InstallCount) & " Items"
  LLMod.InstallingMulti = False
End

Public Sub Screenshot_MouseUp()
  If Items.Current <> Null Then ' On an Item
    MovieTimer.Enabled = False 'Disable the movie from playing if user clicks to cycle through the screenshots
    Try MoviePlayer.Stop ' Stop it too
    Dim ScreenSh As String
    ScreenShotCounter = ScreenShotCounter + 1
    ScreenSh = Data.Items[Items.Current.Key - 1, Data.CFileScreenshot].Text
    ScreenSh = Left(ScreenSh, Len(ScreenSh) - 4) & Str(ScreenShotCounter) & ".jpg"
    If Not Exist(ScreenSh) Then 'Loop Screenshots
      ScreenSh = Data.Items[Items.Current.Key - 1, Data.CFileScreenshot].Text
      ScreenShotCounter = 0
    End If
    Try LLMod.LLScreenshot = Image.Load(ScreenSh)
    Try LLM.Screenshot = LLMod.LLScreenshot.Picture 'Copy here so can resize form and not have it revert to original pic    
    Try TmpImage = LLMod.LLScreenshot 'LLM.Screenshot.Image
    Try TmpImage = TmpImage.Stretch(-1, Screenshot.Height)
    Try Screenshot.Picture = TmpImage.Picture
  End If
End


Public Sub ItemURL_MouseDown()
  Shell "xdg-open " & ItemURL.Text
End

Public Sub MoviePlayer_MouseDown()
  If MoviePlayer.State = 4 Then ' 4 Playing, 3 Paused
    MoviePlayer.Pause
  Else
    MoviePlayer.Play
  End If
End

Public Sub MoviePlayer_DblClick()
  Try MoviePlayer.Stop ' Stop movie and show screenshot again if double clicked
  Screenshot.Visible = True
  MoviePlayer.Visible = False  

End

Public Sub MovieTimer_Timer()
  MovieTimer.Enabled = False
  MoviePlayer.Border = False ' Hide Border
  MoviePlayer.ShowControl = False
  
  If Exist(MovieToPlay) Then 
    Screenshot.Visible = False
    MoviePlayer.Visible = True
    MoviePlayer.Volume = LLM.VideoVolume '0.2 '20%
    'MoviePlayer.URL = Data.Items[CurrentItemKey - 1, Data.CFileMovie].Text 'Moved this back to item click so it can preload the movie
    MoviePlayer.Play
  Else
    Screenshot.Visible = True
    MoviePlayer.Visible = False
  End If

End

Public Sub MoviePlayer_AboutToFinish()
  MoviePlayer.Stop ' Stop early
  Screenshot.Visible = True
  MoviePlayer.Visible = False  
End

Public Sub BuildRepository()
  Dim RepoDir As String = User.Home & "/Desktop/Repository/"
  Dim RepoDirDB As String = RepoDir & "/database/"
  Dim J As Integer
  
  If Not Exist(RepoDirDB) Then Shell "mkdir -p " & Chr(34) & RepoDirDB & Chr(34) Wait
  If Exist(RepoDir) Then Shell "chmod -R 775 " & Chr(34) & RepoDir & Chr(34) Wait
  
  Dim I As Integer
  Dim UN As String
  Dim FileOut As String
  Dim OutFile As String
  Dim RepoContent As String
  Dim RepoLine As String
  Dim Tx As String
  Dim INIType As String
  Dim DestPath As String
  Dim OldTitle As String
  OldTitle = Title.Text
  
  If LLM.DataItemsRows < 0 Then Return
  For I = 0 To LLM.DataItemsRows
    
    Title.Text = "Building Repo: " & Str(I) & "/" & LLM.DataItemsRows
    Wait (0.01) 'Redraw
    
    'Check if item is local or skip (can't build a repo with remote items)
    If InStr(Data.Items[I, Data.CFileINI].Text, "%dbpath%/", 1) Then Continue
    If InStr(Data.Items[I, Data.CFileScreenshot].Text, "%dbpath%/", 1) Then Continue 'Some of the files are incorrect, so this double checks it's not a remote item
    
    UN = Lower(Replace(Data.Items[I, Data.CTitleName].Text, " ", "") & Data.Items[I, Data.CBuildType].Text)  'Make Lower and remove spaces (disable version for now & Data.Items[I, Data.CVersion].Text)
    
    If Exist(Data.Items[I, Data.CFileScreenshot].Text) Then
      OutFile = RepoDirDB & UN & ".jpg"
      If Exist(OutFile) Then Try Kill OutFile  'Remove existing Icon if found
      Try Copy Data.Items[I, Data.CFileScreenshot].Text To OutFile 
    End If
    If Exist(Data.Items[I, Data.CFileFader].Text) Then
      OutFile = RepoDirDB & UN & ".png"
      If Exist(OutFile) Then Try Kill OutFile  'Remove existing Icon if found
      Try Copy Data.Items[I, Data.CFileFader].Text To OutFile 
    End If
    If Exist(Data.Items[I, Data.CFileIcon].Text) Then
      OutFile = RepoDirDB & UN & Right(Data.Items[I, Data.CFileIcon].Text, 4)
      If Exist(OutFile) Then Try Kill OutFile  'Remove existing Icon if found
      Try Copy Data.Items[I, Data.CFileIcon].Text To OutFile 
    End If
    
    RepoLine = ""
    For J = 1 To Data.Items.Columns.Count - 1
      Tx = Data.Items[I, J].Text
      
      If J = Data.CFileFader Then Tx = "%dbpath%/" & UN & ".png"
      If J = Data.CFileScreenshot Then Tx = "%dbpath%/" & UN & ".jpg"
      If J = Data.CFileIcon Then
        If Exist(Data.Items[I, J].Text) Then Tx = "%dbpath%/" & UN & Right(Data.Items[I, J].Text, 4)
      End If
      If J = Data.CFileINI Then
        If Exist(Data.Items[I, J].Text) Then Tx = "%dbpath%/" & Right(Data.Items[I, J].Text, Len(Data.Items[I, J].Text) - LLMod.InStrRevSingle(Data.Items[I, J].Text, "/"))
      End If
      If J = Data.CFileMovie Then
        If Exist(Data.Items[I, J].Text) Then Tx = "%dbpath%/" & Right(Data.Items[I, J].Text, Len(Data.Items[I, J].Text) - LLMod.InStrRevSingle(Data.Items[I, J].Text, "/"))
      End If
      If J = Data.CPathINI Then
        If Exist(Data.Items[I, J].Text) Then Tx = "%dbpath%/" & Right(Data.Items[I, J].Text, Len(Data.Items[I, J].Text) - LLMod.InStrRevSingle(Data.Items[I, J].Text, "/"))
      End If
      If J = Data.CFileCompressed Then
        If Exist(Data.Items[I, J].Text) Then Tx = "%dbpath%/" & Right(Data.Items[I, J].Text, Len(Data.Items[I, J].Text) - LLMod.InStrRevSingle(Data.Items[I, J].Text, "/"))
      End If
      If J = Data.CDescription Then
        Tx = Replace(Data.Items[I, J].Text, Chr(13), Chr(10))
        Tx = Replace(Tx, Chr(10), Chr(30)) 'Convert CRLF to RS (special)
      End If
      
      If J = Data.CURL Then
        Tx = Replace(Data.Items[I, J].Text, Chr(13), Chr(10))
        Tx = Replace(Tx, Chr(10), "|") 'Convert CRLF to Pipe splitter
      End If
      
      
      'Remove Link data, It's not used in Online DB's
      If J = Data.CLnkArguments Then Tx = ""
      If J = Data.CLnkAssociations Then Tx = ""
      If J = Data.CLnkCategories Then Tx = ""
      If J = Data.CLnkComment Then Tx = ""
      If J = Data.CLnkDescription Then Tx = ""
      If J = Data.CLnkExec Then Tx = ""
      If J = Data.CLnkFlags Then Tx = ""
      If J = Data.CLnkIcon Then Tx = ""
      If J = Data.CLnkMultiple Then Tx = ""
      If J = Data.CLnkParentRef Then Tx = ""
      If J = Data.CLnkRunPath Then Tx = ""
      If J = Data.CLnkTerminal Then Tx = ""
      If J = Data.CLnkTitle Then Tx = ""
      
            
      RepoLine &= Tx & ",|,"
    Next
    If RepoLine <> "" Then 'Only add good items
      'Can only add compressed items at this stage, wont hurt to leave the resources in place incase I add support for building non compressed items to include (not sure I can set a output path yet or not)
      INIType = Right(Data.Items[I, Data.CFileINI].Text, 4)
      If INIType = ".tar" Or INIType = ".apz" Or INIType = ".pgz" Then
        RepoContent &= RepoLine & Chr(10)
        
        'Need to copy the .tar, .apz and .pgz files here and if the source isn't a compressed item then do so.
        DestPath = RepoDir & Right(Data.Items[I, Data.CFileINI].Text, Len(Data.Items[I, Data.CFileINI].Text) - LLMod.InStrRevSingle(Data.Items[I, Data.CFileINI].Text, "/"))
        If Exist(DestPath) Then Try Kill DestPath
        If LLM.CopyPackagesIntoRepository = True Then Try Copy Data.Items[I, Data.CFileINI].Text To DestPath 'Only copy packages if specified in Settings
      End If      
    End If
  Next
  
  Title.Text = OldTitle
  
  If RepoContent <> "" Then 'Don't bother with an empty file
    FileOut = RepoDirDB & "LastOSLinuxRepository.db"
    Try File.Save(FileOut, RepoContent)    
      
    If Exist(RepoDir) Then Shell "chmod -R 775 " & Chr(34) & RepoDir & Chr(34) Wait
  
    Message("Built Repository Successfully")    
  End If
End

Public Sub GetRepositoryDatabase()
  Dim I As Integer
  Dim InRepo As String
  Dim InRepoSp As String[]
  
  RepositoryListCount = 0
  If LLMod.StoreMode = 0 Then 'Only do this for Installation mode
    If Exist(LLM.AppPath & "/RepositoryList.ini") Then
      Try InRepo = File.Load(LLM.AppPath & "/RepositoryList.ini")
      
      InRepo = Replace(InRepo, Chr(13), Chr(10)) ' Convert to chr(10) not Chr(13)
      InRepoSp = Split(InRepo, Chr(10))
      For I = 0 To InRepoSp.Count - 1
        If Trim(InRepoSp[I]) <> "" Then
          RepositoryList[RepositoryListCount] = Trim(InRepoSp[I])
          RepositoryListCount = RepositoryListCount + 1
        End If
      Next
    End If
  End If
  
  If Not Exist(RepositoryPathLocal) Then Shell "mkdir -p " & Chr(34) & RepositoryPathLocal & Chr(34) Wait
  If Exist(RepositoryPathLocal) Then Shell "chmod 775 " & Chr(34) & RepositoryPathLocal & Chr(34) Wait
  
  If RepositoryListCount >= 1 Then
    For I = 0 To RepositoryListCount - 1
      
      'Get new Repo DB or keep old one otherwise
      Shell "wget --tries=6 --timeout=9 -q -O " & Chr(34) & RepositoryPathLocal & "LastOSLinuxRepository.db-new" & Chr(34) & " " & RepositoryList[I] Wait
      If Exist(RepositoryPathLocal & "LastOSLinuxRepository.db-new") Then
        Try Kill RepositoryPathLocal & "LastOSLinuxRepository.db" 'Kill any existing DB's if a new one is downloaded, just to make sure we aren't using an out of date DB
        Shell "mv -f " & RepositoryPathLocal & "LastOSLinuxRepository.db-new" & " " & RepositoryPathLocal & "LastOSLinuxRepository.db" Wait
      End If
      
      'Load in DB
      If Left(RepositoryList[I], 1) <> "#" Then 'Lets users remark out unwanted repositories temporary
        CurrentRepositoryURL = Replace(RepositoryList[I], "/database/LastOSLinuxRepository.db", "") 'Used In Sub Below (Without database for main file
        If Exist(RepositoryPathLocal & "LastOSLinuxRepository.db") Then LoadRepositoryDatabase()
      End If
      
    Next
  End If
End


Public Sub LoadRepositoryDatabase()
  If Exist(RepositoryPathLocal & "LastOSLinuxRepository.db") Then
    
    Dim DRows As Integer
    Dim I As Integer
    Dim J As Integer
    Dim K As Integer
    Dim InRepo As String
    Dim InRepoSp As String[]
    Dim InRepoSpTx As String[]
    Dim SkipItem As Boolean

    Try InRepo = File.Load(RepositoryPathLocal & "LastOSLinuxRepository.db")
    InRepoSp = Split(InRepo, Chr(10))
    For I = 0 To InRepoSp.Count - 1
      If Trim(InRepoSp[I]) <> "" Then
        
        InRepoSp[I] = Replace(InRepoSp[I], ",|,", Chr(8))
        InRepoSpTx = Split(InRepoSp[I], Chr(8))
        SkipItem = False
        If Data.Items.Rows.Count >= 1 Then 'Check if Existing Item
          For J = 0 To Data.Items.Rows.Count - 1
            If Data.Items[J, Data.CTitleName].Text & Data.Items[J, Data.CVersion].Text = InRepoSpTx[Data.CTitleName - 1] & InRepoSpTx[Data.CVersion - 1] Then SkipItem = True 'Skip Duplicated Items (Adds different versions though)
          Next
        End If
        If SkipItem = False Then 'Only add new items
          Data.Items.Rows.Count = Data.Items.Rows.Count + 1 'Always Add a row before starting
          DRows = Data.Items.Rows.Count - 1
          LLM.DataItemsRows = DRows
          
          For K = 1 To InRepoSpTx.Count
            If K <= Data.Items.Columns.Count - 1 Then 
              If K = Data.CPathINI Then InRepoSpTx[K - 1] = Replace(InRepoSpTx[K - 1], "%dbpath%", CurrentRepositoryURL) 'Adds download URL to item    
              If K = Data.CDescription Then InRepoSpTx[K - 1] = Replace(InRepoSpTx[K - 1], Chr(30), Chr(13)) 'Testing chr 13 for description, may need 10
              If K = Data.CURL Then InRepoSpTx[K - 1] = Replace(InRepoSpTx[K - 1], "|", Chr(13)) 'Testing chr 13 for description, may need 10
              
              Data.Items[DRows, K].Text = InRepoSpTx[K - 1]
            End If
          Next
        
          Data.Items[DRows, Data.CRefID].Text = Str(Data.Items.Rows.Count) 'Use RefID instead of the built in one which loses positions
          Data.Items[DRows, Data.CIconRef].Text = "0"
          Data.Items[DRows, Data.CSelected].Text = "F"
          
          If Exist(LLMod.ExpPath(Data.Items[DRows, Data.CPathApp].Text)) = True Then
            Data.Items[DRows, Data.CInstalled].Text = "T" 'Hide installed items if picked to
          Else
            Data.Items[DRows, Data.CInstalled].Text = "F" ' Show not installed items
          End If
          
        End If
      End If
    Next

  End If
End

Public Sub GetOnlineFile(URL As String, OutPutFile As String)
  Dim I As Integer
  If QueueCount >= 1 Then 'Testing if this causes issues
    For I = 0 To QueueCount - 1
      If QueueURL[I] = URL Then Return 'Skip existing URL download already queued up
    Next
  End If
  Print "Downloading: " & URL & " to " & OutPutFile
  'URL = Replace(URL, "(", Chr(92) & "(") 'Add Break characters for special characters, noit needed as I put quotes around them, so bash ignores special characters now (in shell)
  'URL = Replace(URL, ")", Chr(92) & ")")
  QueueURL[QueueCount] = URL
  QueueLocal[QueueCount] = OutPutFile
  QueueCount = QueueCount + 1
  If Downloading = False Then
    Downloading = True 'Do this ASAP, so the check is in place as soon as it's sent (as most wont have a wait at the end of the shell calls)  
    DownTime.Enabled = True  'Only call it if it's finnished, else it'll pick up the changes at runtime
  End If
End


Public Sub DownTime_Timer()
  Dim Test As String
  Dim Proc As Process
  Dim I As Integer
  Dim LocalName As String
  Dim GetURL As String
  QueueUpTo = 0
  DownTime.Enabled = False  
  'DownloadingDone is the gate keeper, it'll make sure only one at a time downloads
  
  While QueueUpTo < QueueCount
    If Exist(QueueLocal[QueueUpTo] & ".partial") Then Shell "rm " & Chr(34) & QueueLocal[QueueUpTo] & ".partial" & Chr(34) Wait ' Removal partial download if exist
    
    'Get Weblinks and substitute URL's if found
    GetURL = QueueURL[QueueUpTo]
    If WebLinksCount >= 1 Then
      For I = 0 To WebLinksCount - 1
        LocalName = Replace(QueueLocal[QueueUpTo], RepositoryPathLocal, "") 'Remove Path, just use File Name
        If WebLinksName[I] = LocalName Then GetURL = WebLinksLink[I] 'Use WebLinks if file name is found in that list
      Next
    End If
    'Check Remote file exist, else it'll fail
    Print "Cheking: " & GetURL
    Shell "curl --head --silent " & Chr(34) & GetURL & Chr(34) & " | head -n 1" To Test 'This is slow at times, but it's the only way
    Print "Curl Test: )" & Test & "("
    If Trim(Test) = "" Then 'No Internet or very dodgy item, just abort all internet and try the next item that gets sent here
      Print "Failed: " & GetURL
      Shell "echo 'done' > " & RepositoryPathLocal & "FailedDownload" Wait
    Else ' Try to get item
      If InStr(Test, "404", 1) Then '404 not found
        'Shell "notify-send --hint=int:transient:1 " & Chr(34) & "Skipping Missing Item: " & QueueURL[QueueUpTo] & Chr(34)
        Test = ""
        If Right(GetURL, 4) = ".jpg" Or Right(GetURL, 4) = ".png" Then
        Else 'Only show missing for actual Items, not just their screenshots and faders
          Shell "notify-send " & Chr(34) & "Skipping Missing Item: " & GetURL & Chr(34)        
          Print "Skipping Missing Item: " & GetURL
        End If
        Shell "echo 'done' > " & RepositoryPathLocal & "FailedDownload" Wait
      Else ' It exist, download it
        FailedDownload = False
        'Shell "notify-send --hint=int:transient:1 " & Chr(34) & "Downloading Item: " & QueueURL[QueueUpTo] & Chr(34)
        Print "Downloading: " & GetURL
        Proc = Shell "wget --tries=6 --timeout=9 -q -O " & Chr(34) & QueueLocal[QueueUpTo] & ".partial" & Chr(34) & " --show-progress " & Chr(34) & GetURL & Chr(34) & " && echo 'done' > " & RepositoryPathLocal & "DownloadDone"
        While Not Exist(RepositoryPathLocal & "DownloadDone") 'This loop stops all other downloads until it's done
          Wait (0.01)
          'Print "Here: " & Proc.Value
          If ForceClose = True Then Break ' No point in looping the user already quit (Doesn't work yet)
          If Proc.Value <> 0 Then 'Errored out
            Break
          End If
        Wend
        If Proc.Value = 0 Then
          If Exist(QueueLocal[QueueUpTo] & ".partial") Then 'If you don't have access to the file then it's better to try to delete it and then not move/overwrite as it asks if you want to try, this stops automation.
            If Exist(QueueLocal[QueueUpTo]) Then Try Kill QueueLocal[QueueUpTo]
            Shell "mv -f " & Chr(34) & QueueLocal[QueueUpTo] & ".partial" & Chr(34) & " " & Chr(34) & QueueLocal[QueueUpTo] & Chr(34) Wait          
          End If
          If Exist(RepositoryPathLocal & "DownloadDone") Then Shell "rm " & RepositoryPathLocal & "DownloadDone" Wait
        Else 'Failed, Clean Up
          Shell "notify-send " & Chr(34) & "Failed Downloading Item: " & QueueLocal[QueueUpTo] & Chr(34)
          Shell "echo 'done' > " & RepositoryPathLocal & "FailedDownload" Wait
          Print "Failed Downloading Item: " & QueueLocal[QueueUpTo]
          FailedDownload = True
        End If
      End If
    End If    
    QueueUpTo = QueueUpTo + 1
    Wait (0.01)
  Wend
  QueueUpTo = 0
  QueueCount = 0
  Downloading = False  
  'Make sure it's gone
  Wait (0.01)
  If Exist(RepositoryPathLocal & "DownloadDone") Then Shell "rm " & RepositoryPathLocal & "DownloadDone" Wait
  Wait (0.01)
  
  If ForceClose = True Then Quit 'This is just a precaution for if the wget loop keeps the app from quiting if a problem or forced quit occurs
  If Installing = False And Test <> "" Then Items_Click() 'Reload item once queue completes, if not installing items currently
End


Public Sub Description_MouseWheel()

    If CtrlPressed Then
    If Mouse.Delta > 0 Then
      ScaleDescription = ScaleDescription + 1
    Else If Mouse.Delta < 0 Then
      ScaleDescription = ScaleDescription - 1
    End If
    If ScaleDescription > 20 Then ScaleDescription = 20
    If ScaleDescription < 5 Then ScaleDescription = 5
    
    Description.Font.Size = ScaleDescription
    
    Stop Event
  
  End If

End

Public Sub StartButTab_KeyPress()
  If Key.Code = Key.Enter Or If Key.Code = Key.Return Then
    If LLMod.StoreMode = 0 Then
      Title.Text = "Install Started" 'This is the best I can do as the form doesn't refresh/redraw until the key release event returns, but it does between them
      'Wait (0.01)
    End If
  End If
End


Public Sub StartPushed()  
  'Don't allow pressing start on a Item and have it play the movie in the background
  MoviePlayer.Stop ' Just In Case
  MovieTimer.Enabled = False 'Just in case
  'Check if ctrl is held to build Repository
  If LLMod.StoreMode = 0 And CtrlPressed = True Then 'Only make Repo's out of Install Mode items (not Launcher)
    CtrlPressed = False ' Just make sure it resets
    ShiftPressed = False
    AltPressed = False
    BuildRepository()
    Return
  End If
  
  If CurrentItemKey <> Null And CurrentItemKey > 0 Then
    If Data.Items.Rows.Count = 0 Then Return 'No Items to run, quit        
    If LLMod.StoreMode = 1 Then
      If WaitASec = True Then Return
      RunGame(CurrentItemKey - 1)
      WaitASec = True
      WaitJustASecond.Enabled = True
    Else 'Installer Mode
      RunMiniInstaller()       
    End If
  End If
  
End

Public Sub StartButTab_KeyRelease()

  ForceStart = True
  Stats.Text = Str(Key.Code)
  If Key.Code = Key.Enter Or If Key.Code = Key.Return Or Key.Code = 16777221 Then    
    StartPushed() 
    'Stop Event
  End If
  ForceStart = False

End

Public Sub Form_GotFocus()
  WaitASec = True 'Make it ignore everything until is's had a sec to recover, so it doesn't re-run items etc
  WaitJustASecond.Enabled = True
  

End

Public Sub RunDelay_Timer()
  RunDelay.Enabled = False
  StartPushed()
End


Public Sub LoadWebLinks()  
  Dim I As Integer
  
  WebLinksCount = 0
  
  'Load in Favorites if exists
  FavCount = 0
  Dim InFavs As String
  Dim InFavSp As String[]
  Dim TemStrSp As String[]
  If LLMod.StoreMode = 0 Then
    If Exist(LLM.AppPath & "/RemoteWebLinks.db") Then
      Try InFavs = File.Load(LLM.AppPath & "/RemoteWebLinks.db")
      InFavs = Replace(InFavs, Chr(13), Chr(10)) ' Convert to chr(10) not Chr(13)
      InFavSp = Split(InFavs, Chr(10))
      For I = 0 To InFavSp.Count - 1
        If Trim(InFavSp[I]) <> "" Then
          If InStr(InFavSp[I], "|", 1) >= 2 Then
            TemStrSp = Split(Trim(InFavSp[I]), "|")
            WebLinksName[WebLinksCount] = Trim(TemStrSp[0])
            WebLinksLink[WebLinksCount] = Trim(TemStrSp[1])            
            'Print WebLinksName[WebLinksCount] & " = " & WebLinksLink[WebLinksCount]
            WebLinksCount = WebLinksCount + 1
          End If
        End If
      Next
    End If
  End If
End

Public Sub ReScanItems()
  RescanTime.Enabled = True  'Using a timer allows the form to finish events and draw correctly
End Sub

Public Sub RescanTime_Timer()
  RescanTime.Enabled = False
  
  'Clear All Known Items first
  Data.ClearDataFields() 'This now does the Column Adding and naming scheme
  OldPathScan = ""
  Data.ScanPaths.Clear 'Empty known paths
  
  Items.Clear 'Clear all Items (They get re-added)
  
  LastOSLinuxStoreMain.Hide
  LLM.Loaded = False
  LoadingScreen.Show
  LoadingScreen.Refresh
  Wait (0.1) ' Draw Loading Form      
  ForceReScanItems = True
  Rescanning = True
  'Get new items
  Wait (0.1) ' Draw Loading Form
  GetItemPaths()
  'Redo Categories
  GenerateCategoryList()
  'Redo main Lists
  Rescanning = False
  LLM.Loaded = True
  GenerateMainList()
  LoadingScreen.Hide
  LastOSLinuxStoreMain.Show
  ForceReScanItems = False

End

Public Sub Stats_DblClick()
  'Do Clipboard here
  Try Clipboard.Copy(Stats.Text)

End

Public Sub BuildToDesktop(IniFile As String)
  
  Dim DesktopOutPath As String = User.Home & "/Desktop/"  
  'Message(LLMod.Slashed(IniFile) & "LLGame.llg")
  If Exist(LLMod.Slashed(IniFile) & "LLGame.llg") Then  
    LLMod.LLTitle = ""
    LLMod.LoadLLFile(LLMod.Slashed(IniFile) & "LLGame.llg")
    If LLMod.LLTitle <> "" Then
      Title.Text = LLMod.LLTitle & " is building on desktop..."
      Shell "mkdir -p " & Chr(34) & DesktopOutPath & LLMod.LLTitle & Chr(34) Wait
      Shell "cp -rf " & Chr(34) & LLMod.Slashed(IniFile) & "." & Chr(34) & " " & Chr(34) & DesktopOutPath & LLMod.LLTitle & Chr(34) Wait
      Shell "cd " & Chr(34) & DesktopOutPath & LLMod.LLTitle & Chr(34) & " && llapp -c" Wait
      Message("Built " & LLMod.LLTitle & " to the Desktop")
    End If
  Else
    Message(LLMod.Slashed(IniFile) & "LLGame.llg" & " not found" & Chr(10) & Chr(10) & "You can currently only compress Linux Games")
  End If
    
End

